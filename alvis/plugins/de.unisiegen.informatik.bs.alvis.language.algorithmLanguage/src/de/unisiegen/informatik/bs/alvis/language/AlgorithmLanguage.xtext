grammar org.xtext.example.mydsl1.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "de.unisiegen.informatik.bs.alvis.language.algorithmLanguage"

// @author Eduard Boos
// Grammar used to generate the algorithmLanguage Editor.


Model:
	((functions+=functionDefinition)* main=mainFunction);

functionDefinition : name=ID '(' (formalParams=formalParams)? ')' (':' returnType=type)? blocks+=block ;

mainFunction   :main='main' '('  formalParams=formalParams? ')' blocks+=block ;

formalParams  : params+=param (',' params+=param)*;

param   : type name=ID;
 
block  : {block}('begin'|'{') statements+=statement* ('end'|'}');

type: types=('String'|'Integer'|'Boolean'|'Graph'|'Vertex'|'Edge'|'Queue'|'Stack');


statement :
    {statement}  postFixExpression+=postfixExpr endExpr
    | declaration endExpr
    |{statement}  assignments+=assignment endExpr
    |{statement} 'return' exprs+=expr? endExpr
    | 'if' expr ':'statements+= statement ('else' statements+=statement)?
    | 'for' param 'in' exprs+=expr ':' statements+=statement
    | 'while' expr ':' statements+=statement
    | block;
    
   

declaration
    : (variableType+=type ('[]')?)+  name=ID  ('=' exprs+=expr)?;

assignment
    : postfixExpr '=' exprs+=expr
    ;

expr
    : andExpr ('||' andExprs+=andExpr)*
    ;

andExpr
    : eqExpr ('&&' eqExprs+=eqExpr)*
    ;

eqExpr
    : relExpr (('=='|'!=') relExprs+=relExpr)*
    ;

relExpr
    : addExpr (('<'|'>'|'<=' |'>=') addExpr+=addExpr)*
    ;

addExpr
    : mulExpr ((sign) mulExprs+=mulExpr)*
    ;

mulExpr
    : atoms+=atom (('*' | '/' | '%' ) atoms+=atom)*
    ;

atom: '!' atom
    | '(' sign expr ')'
    | '(' expr ')'
    | postfixExpr
    |{atom} constants+=constant
    ;


postfixExpr
     : ((existingVariable=[declaration]|existingVariable=[param]|existingVariable=[functionDefinition])) ( '.' ID  // to change
      | '(' (expressions+=expr (',' expressions+=expr)*)? ')' 
      | '[' expressions+=expr ']' )*
    ;
    
constant
// BOOL
	:{constant}'true'|{constant}'false'
// FLOAT(Real float cannot be used)
	|Float+=FLOAT
// INT and STRING
	|Integer=INT
	|String=STRING
// NULL and INFINITY
	|Null='null'
	|Infinity='infty';
    
FLOAT
	: FLOAT+=INT '.' (FLOAT+=INT)+;
endExpr
	: (',' | ';') ; //war vorher terminal

terminal sign: '+' | '-' ;


//END OF Grammar

//Default Tokens from Xtext: ID,INT,STRING is used in our Grammar

//terminal ID : 
// '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
//terminal INT returns ecore::EInt: 
// ('0'..'9')+;
//terminal STRING    : 
// '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
// "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"; 
//terminal ML_COMMENT    : 
// '/*' -> '*/';
//terminal SL_COMMENT : 
// '//' !('\n'|'\r')* ('\r'? '\n')?;
//terminal WS    : 
// (' '|'\t'|'\r'|'\n')+;
//terminal ANY_OTHER: 
// .; 