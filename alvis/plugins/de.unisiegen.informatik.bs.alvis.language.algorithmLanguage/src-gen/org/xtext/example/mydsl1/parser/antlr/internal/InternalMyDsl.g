/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.mydsl1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl1.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, IAstFactory factory, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("org/xtext/example/mydsl1/parser/antlr/internal/InternalMyDsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getFunctionsFunctionDefinitionParserRuleCall_0_0(), currentNode); 
	    }
		lv_functions_0_0=rulefunctionDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"functions",
	        		lv_functions_0_0, 
	        		"functionDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getMainMainFunctionParserRuleCall_1_0(), currentNode); 
	    }
		lv_main_1_0=rulemainFunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"main",
	        		lv_main_1_0, 
	        		"mainFunction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulefunctionDefinition
entryRulefunctionDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionDefinitionRule(), currentNode); }
	 iv_rulefunctionDefinition=rulefunctionDefinition 
	 { $current=$iv_rulefunctionDefinition.current; } 
	 EOF 
;

// Rule functionDefinition
rulefunctionDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_name_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_0_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDefinitionAccess().getFormalParamsFormalParamsParserRuleCall_2_0(), currentNode); 
	    }
		lv_formalParams_2_0=ruleformalParams		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"formalParams",
	        		lv_formalParams_2_0, 
	        		"formalParams", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_3(), null); 
    }
(	':' 
    {
        createLeafNode(grammarAccess.getFunctionDefinitionAccess().getColonKeyword_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDefinitionAccess().getReturnTypeTypeParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_returnType_5_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"returnType",
	        		lv_returnType_5_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBlocksBlockParserRuleCall_5_0(), currentNode); 
	    }
		lv_blocks_6_0=ruleblock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"blocks",
	        		lv_blocks_6_0, 
	        		"block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulemainFunction
entryRulemainFunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMainFunctionRule(), currentNode); }
	 iv_rulemainFunction=rulemainFunction 
	 { $current=$iv_rulemainFunction.current; } 
	 EOF 
;

// Rule mainFunction
rulemainFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_main_0_0=	'main' 
    {
        createLeafNode(grammarAccess.getMainFunctionAccess().getMainMainKeyword_0_0(), "main"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMainFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "main", lv_main_0_0, "main", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getMainFunctionAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMainFunctionAccess().getFormalParamsFormalParamsParserRuleCall_2_0(), currentNode); 
	    }
		lv_formalParams_2_0=ruleformalParams		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMainFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"formalParams",
	        		lv_formalParams_2_0, 
	        		"formalParams", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?	')' 
    {
        createLeafNode(grammarAccess.getMainFunctionAccess().getRightParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMainFunctionAccess().getBlocksBlockParserRuleCall_4_0(), currentNode); 
	    }
		lv_blocks_4_0=ruleblock		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMainFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"blocks",
	        		lv_blocks_4_0, 
	        		"block", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleformalParams
entryRuleformalParams returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFormalParamsRule(), currentNode); }
	 iv_ruleformalParams=ruleformalParams 
	 { $current=$iv_ruleformalParams.current; } 
	 EOF 
;

// Rule formalParams
ruleformalParams returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFormalParamsAccess().getParamsParamParserRuleCall_0_0(), currentNode); 
	    }
		lv_params_0_0=ruleparam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalParamsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_0_0, 
	        		"param", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getFormalParamsAccess().getCommaKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFormalParamsAccess().getParamsParamParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_params_2_0=ruleparam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFormalParamsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_2_0, 
	        		"param", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleparam
entryRuleparam returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParamRule(), currentNode); }
	 iv_ruleparam=ruleparam 
	 { $current=$iv_ruleparam.current; } 
	 EOF 
;

// Rule param
ruleparam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getParamAccess().getTypeParserRuleCall_0(), currentNode); 
    }
    this_type_0=ruletype
    { 
        $current = $this_type_0.current; 
        currentNode = currentNode.getParent();
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getParamAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBlockRule(), currentNode); }
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current; } 
	 EOF 
;

// Rule block
ruleblock returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getBlockAccess().getBlockAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getBlockAccess().getBlockAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'begin' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getBeginKeyword_1_0(), null); 
    }

    |	'{' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0(), currentNode); 
	    }
		lv_statements_3_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBlockRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_3_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(	'end' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getEndKeyword_3_0(), null); 
    }

    |	'}' 
    {
        createLeafNode(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3_1(), null); 
    }
))
;





// Entry rule entryRuletype
entryRuletype returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTypeRule(), currentNode); }
	 iv_ruletype=ruletype 
	 { $current=$iv_ruletype.current; } 
	 EOF 
;

// Rule type
ruletype returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
(
		lv_types_0_1=	'String' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getTypesStringKeyword_0_0(), "types"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "types", lv_types_0_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_types_0_2=	'Integer' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getTypesIntegerKeyword_0_1(), "types"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "types", lv_types_0_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_types_0_3=	'Boolean' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getTypesBooleanKeyword_0_2(), "types"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "types", lv_types_0_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_types_0_4=	'Graph' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getTypesGraphKeyword_0_3(), "types"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "types", lv_types_0_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_types_0_5=	'Vertex' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getTypesVertexKeyword_0_4(), "types"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "types", lv_types_0_5, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_types_0_6=	'Edge' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getTypesEdgeKeyword_0_5(), "types"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "types", lv_types_0_6, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_types_0_7=	'Queue' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getTypesQueueKeyword_0_6(), "types"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "types", lv_types_0_7, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_types_0_8=	'Stack' 
    {
        createLeafNode(grammarAccess.getTypeAccess().getTypesStackKeyword_0_7(), "types"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTypeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "types", lv_types_0_8, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)
;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getStatementAccess().getStatementAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStatementAccess().getStatementAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getPostFixExpressionPostfixExprParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_postFixExpression_1_0=rulepostfixExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"postFixExpression",
	        		lv_postFixExpression_1_0, 
	        		"postfixExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getEndExprParserRuleCall_0_2(), currentNode); 
    }
ruleendExpr
    { 
        currentNode = currentNode.getParent();
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getDeclarationParserRuleCall_1_0(), currentNode); 
    }
    this_declaration_3=ruledeclaration
    { 
        $current = $this_declaration_3.current; 
        currentNode = currentNode.getParent();
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getEndExprParserRuleCall_1_1(), currentNode); 
    }
ruleendExpr
    { 
        currentNode = currentNode.getParent();
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getStatementAccess().getStatementAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStatementAccess().getStatementAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getAssignmentsAssignmentParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_assignments_6_0=ruleassignment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"assignments",
	        		lv_assignments_6_0, 
	        		"assignment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getEndExprParserRuleCall_2_2(), currentNode); 
    }
ruleendExpr
    { 
        currentNode = currentNode.getParent();
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getStatementAccess().getStatementAction_3_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStatementAccess().getStatementAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'return' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getReturnKeyword_3_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getExprsExprParserRuleCall_3_2_0(), currentNode); 
	    }
		lv_exprs_10_0=ruleexpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exprs",
	        		lv_exprs_10_0, 
	        		"expr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getEndExprParserRuleCall_3_3(), currentNode); 
    }
ruleendExpr
    { 
        currentNode = currentNode.getParent();
    }
)
    |(	'if' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getIfKeyword_4_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getExprParserRuleCall_4_1(), currentNode); 
    }
    this_expr_13=ruleexpr
    { 
        $current = $this_expr_13.current; 
        currentNode = currentNode.getParent();
    }
	':' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getColonKeyword_4_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getStatementsStatementParserRuleCall_4_3_0(), currentNode); 
	    }
		lv_statements_15_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_15_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'else' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getElseKeyword_4_4_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getStatementsStatementParserRuleCall_4_4_1_0(), currentNode); 
	    }
		lv_statements_17_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_17_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
    |(	'for' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getForKeyword_5_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getParamParserRuleCall_5_1(), currentNode); 
    }
    this_param_19=ruleparam
    { 
        $current = $this_param_19.current; 
        currentNode = currentNode.getParent();
    }
	'in' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getInKeyword_5_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getExprsExprParserRuleCall_5_3_0(), currentNode); 
	    }
		lv_exprs_21_0=ruleexpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exprs",
	        		lv_exprs_21_0, 
	        		"expr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getColonKeyword_5_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getStatementsStatementParserRuleCall_5_5_0(), currentNode); 
	    }
		lv_statements_23_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_23_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(	'while' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getWhileKeyword_6_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getExprParserRuleCall_6_1(), currentNode); 
    }
    this_expr_25=ruleexpr
    { 
        $current = $this_expr_25.current; 
        currentNode = currentNode.getParent();
    }
	':' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getColonKeyword_6_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getStatementsStatementParserRuleCall_6_3_0(), currentNode); 
	    }
		lv_statements_27_0=rulestatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_27_0, 
	        		"statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_7(), currentNode); 
    }
    this_block_28=ruleblock
    { 
        $current = $this_block_28.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuledeclaration
entryRuledeclaration returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDeclarationRule(), currentNode); }
	 iv_ruledeclaration=ruledeclaration 
	 { $current=$iv_ruledeclaration.current; } 
	 EOF 
;

// Rule declaration
ruledeclaration returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getVariableTypeTypeParserRuleCall_0_0_0(), currentNode); 
	    }
		lv_variableType_0_0=ruletype		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"variableType",
	        		lv_variableType_0_0, 
	        		"type", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	'[]' 
    {
        createLeafNode(grammarAccess.getDeclarationAccess().getLeftSquareBracketRightSquareBracketKeyword_0_1(), null); 
    }
)?)+(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getDeclarationAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'=' 
    {
        createLeafNode(grammarAccess.getDeclarationAccess().getEqualsSignKeyword_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDeclarationAccess().getExprsExprParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_exprs_4_0=ruleexpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDeclarationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exprs",
	        		lv_exprs_4_0, 
	        		"expr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleassignment
entryRuleassignment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentRule(), currentNode); }
	 iv_ruleassignment=ruleassignment 
	 { $current=$iv_ruleassignment.current; } 
	 EOF 
;

// Rule assignment
ruleassignment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignmentAccess().getPostfixExprParserRuleCall_0(), currentNode); 
    }
    this_postfixExpr_0=rulepostfixExpr
    { 
        $current = $this_postfixExpr_0.current; 
        currentNode = currentNode.getParent();
    }
	'=' 
    {
        createLeafNode(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentAccess().getExprsExprParserRuleCall_2_0(), currentNode); 
	    }
		lv_exprs_2_0=ruleexpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"exprs",
	        		lv_exprs_2_0, 
	        		"expr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleexpr
entryRuleexpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExprRule(), currentNode); }
	 iv_ruleexpr=ruleexpr 
	 { $current=$iv_ruleexpr.current; } 
	 EOF 
;

// Rule expr
ruleexpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getExprAccess().getAndExprParserRuleCall_0(), currentNode); 
    }
    this_andExpr_0=ruleandExpr
    { 
        $current = $this_andExpr_0.current; 
        currentNode = currentNode.getParent();
    }
(	'||' 
    {
        createLeafNode(grammarAccess.getExprAccess().getVerticalLineVerticalLineKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExprAccess().getAndExprsAndExprParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_andExprs_2_0=ruleandExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"andExprs",
	        		lv_andExprs_2_0, 
	        		"andExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleandExpr
entryRuleandExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndExprRule(), currentNode); }
	 iv_ruleandExpr=ruleandExpr 
	 { $current=$iv_ruleandExpr.current; } 
	 EOF 
;

// Rule andExpr
ruleandExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAndExprAccess().getEqExprParserRuleCall_0(), currentNode); 
    }
    this_eqExpr_0=ruleeqExpr
    { 
        $current = $this_eqExpr_0.current; 
        currentNode = currentNode.getParent();
    }
(	'&&' 
    {
        createLeafNode(grammarAccess.getAndExprAccess().getAmpersandAmpersandKeyword_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExprAccess().getEqExprsEqExprParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_eqExprs_2_0=ruleeqExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"eqExprs",
	        		lv_eqExprs_2_0, 
	        		"eqExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleeqExpr
entryRuleeqExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEqExprRule(), currentNode); }
	 iv_ruleeqExpr=ruleeqExpr 
	 { $current=$iv_ruleeqExpr.current; } 
	 EOF 
;

// Rule eqExpr
ruleeqExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getEqExprAccess().getRelExprParserRuleCall_0(), currentNode); 
    }
    this_relExpr_0=rulerelExpr
    { 
        $current = $this_relExpr_0.current; 
        currentNode = currentNode.getParent();
    }
((	'==' 
    {
        createLeafNode(grammarAccess.getEqExprAccess().getEqualsSignEqualsSignKeyword_1_0_0(), null); 
    }

    |	'!=' 
    {
        createLeafNode(grammarAccess.getEqExprAccess().getExclamationMarkEqualsSignKeyword_1_0_1(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEqExprAccess().getRelExprsRelExprParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_relExprs_3_0=rulerelExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEqExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"relExprs",
	        		lv_relExprs_3_0, 
	        		"relExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulerelExpr
entryRulerelExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelExprRule(), currentNode); }
	 iv_rulerelExpr=rulerelExpr 
	 { $current=$iv_rulerelExpr.current; } 
	 EOF 
;

// Rule relExpr
rulerelExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getRelExprAccess().getAddExprParserRuleCall_0(), currentNode); 
    }
    this_addExpr_0=ruleaddExpr
    { 
        $current = $this_addExpr_0.current; 
        currentNode = currentNode.getParent();
    }
((	'<' 
    {
        createLeafNode(grammarAccess.getRelExprAccess().getLessThanSignKeyword_1_0_0(), null); 
    }

    |	'>' 
    {
        createLeafNode(grammarAccess.getRelExprAccess().getGreaterThanSignKeyword_1_0_1(), null); 
    }

    |	'<=' 
    {
        createLeafNode(grammarAccess.getRelExprAccess().getLessThanSignEqualsSignKeyword_1_0_2(), null); 
    }

    |	'>=' 
    {
        createLeafNode(grammarAccess.getRelExprAccess().getGreaterThanSignEqualsSignKeyword_1_0_3(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelExprAccess().getAddExprAddExprParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_addExpr_5_0=ruleaddExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"addExpr",
	        		lv_addExpr_5_0, 
	        		"addExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleaddExpr
entryRuleaddExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAddExprRule(), currentNode); }
	 iv_ruleaddExpr=ruleaddExpr 
	 { $current=$iv_ruleaddExpr.current; } 
	 EOF 
;

// Rule addExpr
ruleaddExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAddExprAccess().getMulExprParserRuleCall_0(), currentNode); 
    }
    this_mulExpr_0=rulemulExpr
    { 
        $current = $this_mulExpr_0.current; 
        currentNode = currentNode.getParent();
    }
(RULE_SIGN
    { 
    createLeafNode(grammarAccess.getAddExprAccess().getSignTerminalRuleCall_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAddExprAccess().getMulExprsMulExprParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_mulExprs_2_0=rulemulExpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAddExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"mulExprs",
	        		lv_mulExprs_2_0, 
	        		"mulExpr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRulemulExpr
entryRulemulExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMulExprRule(), currentNode); }
	 iv_rulemulExpr=rulemulExpr 
	 { $current=$iv_rulemulExpr.current; } 
	 EOF 
;

// Rule mulExpr
rulemulExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMulExprAccess().getAtomsAtomParserRuleCall_0_0(), currentNode); 
	    }
		lv_atoms_0_0=ruleatom		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMulExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"atoms",
	        		lv_atoms_0_0, 
	        		"atom", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)((	'*' 
    {
        createLeafNode(grammarAccess.getMulExprAccess().getAsteriskKeyword_1_0_0(), null); 
    }

    |	'/' 
    {
        createLeafNode(grammarAccess.getMulExprAccess().getSolidusKeyword_1_0_1(), null); 
    }

    |	'%' 
    {
        createLeafNode(grammarAccess.getMulExprAccess().getPercentSignKeyword_1_0_2(), null); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMulExprAccess().getAtomsAtomParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_atoms_4_0=ruleatom		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMulExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"atoms",
	        		lv_atoms_4_0, 
	        		"atom", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)
;





// Entry rule entryRuleatom
entryRuleatom returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAtomRule(), currentNode); }
	 iv_ruleatom=ruleatom 
	 { $current=$iv_ruleatom.current; } 
	 EOF 
;

// Rule atom
ruleatom returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((	'!' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getExclamationMarkKeyword_0_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getAtomParserRuleCall_0_1(), currentNode); 
    }
    this_atom_1=ruleatom
    { 
        $current = $this_atom_1.current; 
        currentNode = currentNode.getParent();
    }
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_1_0(), null); 
    }
RULE_SIGN
    { 
    createLeafNode(grammarAccess.getAtomAccess().getSignTerminalRuleCall_1_1(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getExprParserRuleCall_1_2(), currentNode); 
    }
    this_expr_4=ruleexpr
    { 
        $current = $this_expr_4.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getRightParenthesisKeyword_1_3(), null); 
    }
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_2_0(), null); 
    }

	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getExprParserRuleCall_2_1(), currentNode); 
    }
    this_expr_7=ruleexpr
    { 
        $current = $this_expr_7.current; 
        currentNode = currentNode.getParent();
    }
	')' 
    {
        createLeafNode(grammarAccess.getAtomAccess().getRightParenthesisKeyword_2_2(), null); 
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getPostfixExprParserRuleCall_3(), currentNode); 
    }
    this_postfixExpr_9=rulepostfixExpr
    { 
        $current = $this_postfixExpr_9.current; 
        currentNode = currentNode.getParent();
    }

    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getAtomAccess().getAtomAction_4_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAtomAccess().getAtomAction_4_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAtomAccess().getConstantsConstantParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_constants_11_0=ruleconstant		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAtomRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"constants",
	        		lv_constants_11_0, 
	        		"constant", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRulepostfixExpr
entryRulepostfixExpr returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPostfixExprRule(), currentNode); }
	 iv_rulepostfixExpr=rulepostfixExpr 
	 { $current=$iv_rulepostfixExpr.current; } 
	 EOF 
;

// Rule postfixExpr
rulepostfixExpr returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPostfixExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPostfixExprAccess().getExistingVariableDeclarationCrossReference_0_0_0(), "existingVariable"); 
	}

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPostfixExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPostfixExprAccess().getExistingVariableParamCrossReference_0_1_0(), "existingVariable"); 
	}

)
)
    |(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPostfixExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPostfixExprAccess().getExistingVariableFunctionDefinitionCrossReference_0_2_0(), "existingVariable"); 
	}

)
))((	'.' 
    {
        createLeafNode(grammarAccess.getPostfixExprAccess().getFullStopKeyword_1_0_0(), null); 
    }
RULE_ID
    { 
    createLeafNode(grammarAccess.getPostfixExprAccess().getIDTerminalRuleCall_1_0_1(), null); 
    }
)
    |(	'(' 
    {
        createLeafNode(grammarAccess.getPostfixExprAccess().getLeftParenthesisKeyword_1_1_0(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostfixExprAccess().getExpressionsExprParserRuleCall_1_1_1_0_0(), currentNode); 
	    }
		lv_expressions_6_0=ruleexpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostfixExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_6_0, 
	        		"expr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getPostfixExprAccess().getCommaKeyword_1_1_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostfixExprAccess().getExpressionsExprParserRuleCall_1_1_1_1_1_0(), currentNode); 
	    }
		lv_expressions_8_0=ruleexpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostfixExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_8_0, 
	        		"expr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?	')' 
    {
        createLeafNode(grammarAccess.getPostfixExprAccess().getRightParenthesisKeyword_1_1_2(), null); 
    }
)
    |(	'[' 
    {
        createLeafNode(grammarAccess.getPostfixExprAccess().getLeftSquareBracketKeyword_1_2_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPostfixExprAccess().getExpressionsExprParserRuleCall_1_2_1_0(), currentNode); 
	    }
		lv_expressions_11_0=ruleexpr		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPostfixExprRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_11_0, 
	        		"expr", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	']' 
    {
        createLeafNode(grammarAccess.getPostfixExprAccess().getRightSquareBracketKeyword_1_2_2(), null); 
    }
))*)
;





// Entry rule entryRuleconstant
entryRuleconstant returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConstantRule(), currentNode); }
	 iv_ruleconstant=ruleconstant 
	 { $current=$iv_ruleconstant.current; } 
	 EOF 
;

// Rule constant
ruleconstant returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getConstantAccess().getConstantAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConstantAccess().getConstantAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'true' 
    {
        createLeafNode(grammarAccess.getConstantAccess().getTrueKeyword_0_1(), null); 
    }
)
    |((
	{ 
	  /* */ 
	}
    { 
        temp=factory.create(grammarAccess.getConstantAccess().getConstantAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConstantAccess().getConstantAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'false' 
    {
        createLeafNode(grammarAccess.getConstantAccess().getFalseKeyword_1_1(), null); 
    }
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConstantAccess().getFloatFLOATParserRuleCall_2_0(), currentNode); 
	    }
		lv_Float_4_0=ruleFLOAT		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"Float",
	        		lv_Float_4_0, 
	        		"FLOAT", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		lv_Integer_5_0=RULE_INT
		{
			createLeafNode(grammarAccess.getConstantAccess().getIntegerINTTerminalRuleCall_3_0(), "Integer"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"Integer",
	        		lv_Integer_5_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_String_6_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getConstantAccess().getStringSTRINGTerminalRuleCall_4_0(), "String"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"String",
	        		lv_String_6_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_Null_7_0=	'null' 
    {
        createLeafNode(grammarAccess.getConstantAccess().getNullNullKeyword_5_0(), "Null"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "Null", lv_Null_7_0, "null", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_Infinity_8_0=	'infty' 
    {
        createLeafNode(grammarAccess.getConstantAccess().getInfinityInftyKeyword_6_0(), "Infinity"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConstantRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "Infinity", lv_Infinity_8_0, "infty", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFLOATRule(), currentNode); }
	 iv_ruleFLOAT=ruleFLOAT 
	 { $current=$iv_ruleFLOAT.current; } 
	 EOF 
;

// Rule FLOAT
ruleFLOAT returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_FLOAT_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getFLOATAccess().getFLOATINTTerminalRuleCall_0_0(), "FLOAT"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFLOATRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"FLOAT",
	        		lv_FLOAT_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'.' 
    {
        createLeafNode(grammarAccess.getFLOATAccess().getFullStopKeyword_1(), null); 
    }
(
(
		lv_FLOAT_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getFLOATAccess().getFLOATINTTerminalRuleCall_2_0(), "FLOAT"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFLOATRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"FLOAT",
	        		lv_FLOAT_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+)
;





// Entry rule entryRuleendExpr
entryRuleendExpr returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEndExprRule(), currentNode); } 
	 iv_ruleendExpr=ruleendExpr 
	 { $current=$iv_ruleendExpr.current.getText(); }  
	 EOF 
;

// Rule endExpr
ruleendExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw=',' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndExprAccess().getCommaKeyword_0(), null); 
    }

    |
	kw=';' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getEndExprAccess().getSemicolonKeyword_1(), null); 
    }
)
    ;





RULE_SIGN : ('+'|'-');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


