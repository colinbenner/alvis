/*
* generated by Xtext
*/

package org.xtext.example.mydsl1.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionsFunctionDefinitionParserRuleCall_0_0 = (RuleCall)cFunctionsAssignment_0.eContents().get(0);
		private final Assignment cMainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainMainFunctionParserRuleCall_1_0 = (RuleCall)cMainAssignment_1.eContents().get(0);
		
		//// @author Eduard Boos
		//
		//// Grammar used to generate the algorithmLanguage Editor.
		//
		//Model:
		//	functions+=functionDefinition* main=mainFunction;
		public ParserRule getRule() { return rule; }

		//functions+=functionDefinition* main=mainFunction
		public Group getGroup() { return cGroup; }

		//functions+=functionDefinition*
		public Assignment getFunctionsAssignment_0() { return cFunctionsAssignment_0; }

		//functionDefinition
		public RuleCall getFunctionsFunctionDefinitionParserRuleCall_0_0() { return cFunctionsFunctionDefinitionParserRuleCall_0_0; }

		//main=mainFunction
		public Assignment getMainAssignment_1() { return cMainAssignment_1; }

		//mainFunction
		public RuleCall getMainMainFunctionParserRuleCall_1_0() { return cMainMainFunctionParserRuleCall_1_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormalParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParamsFormalParamsParserRuleCall_2_0 = (RuleCall)cFormalParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnTypeTypeParserRuleCall_4_1_0 = (RuleCall)cReturnTypeAssignment_4_1.eContents().get(0);
		private final Assignment cBlocksAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlocksBlockParserRuleCall_5_0 = (RuleCall)cBlocksAssignment_5.eContents().get(0);
		
		//functionDefinition:
		//	name=ID "(" formalParams=formalParams? ")" (":" returnType=type)? blocks+=block;
		public ParserRule getRule() { return rule; }

		//name=ID "(" formalParams=formalParams? ")" (":" returnType=type)? blocks+=block
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//formalParams=formalParams?
		public Assignment getFormalParamsAssignment_2() { return cFormalParamsAssignment_2; }

		//formalParams
		public RuleCall getFormalParamsFormalParamsParserRuleCall_2_0() { return cFormalParamsFormalParamsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(":" returnType=type)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//returnType=type
		public Assignment getReturnTypeAssignment_4_1() { return cReturnTypeAssignment_4_1; }

		//type
		public RuleCall getReturnTypeTypeParserRuleCall_4_1_0() { return cReturnTypeTypeParserRuleCall_4_1_0; }

		//blocks+=block
		public Assignment getBlocksAssignment_5() { return cBlocksAssignment_5; }

		//block
		public RuleCall getBlocksBlockParserRuleCall_5_0() { return cBlocksBlockParserRuleCall_5_0; }
	}

	public class MainFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mainFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMainAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMainMainKeyword_0_0 = (Keyword)cMainAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormalParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParamsFormalParamsParserRuleCall_2_0 = (RuleCall)cFormalParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksBlockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		
		//mainFunction:
		//	main="main" "(" formalParams=formalParams? ")" blocks+=block;
		public ParserRule getRule() { return rule; }

		//main="main" "(" formalParams=formalParams? ")" blocks+=block
		public Group getGroup() { return cGroup; }

		//main="main"
		public Assignment getMainAssignment_0() { return cMainAssignment_0; }

		//"main"
		public Keyword getMainMainKeyword_0_0() { return cMainMainKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//formalParams=formalParams?
		public Assignment getFormalParamsAssignment_2() { return cFormalParamsAssignment_2; }

		//formalParams
		public RuleCall getFormalParamsFormalParamsParserRuleCall_2_0() { return cFormalParamsFormalParamsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//blocks+=block
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//block
		public RuleCall getBlocksBlockParserRuleCall_4_0() { return cBlocksBlockParserRuleCall_4_0; }
	}

	public class FormalParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "formalParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		
		//formalParams:
		//	params+=param ("," params+=param)*;
		public ParserRule getRule() { return rule; }

		//params+=param ("," params+=param)*
		public Group getGroup() { return cGroup; }

		//params+=param
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }

		//param
		public RuleCall getParamsParamParserRuleCall_0_0() { return cParamsParamParserRuleCall_0_0; }

		//("," params+=param)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//params+=param
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//param
		public RuleCall getParamsParamParserRuleCall_1_1_0() { return cParamsParamParserRuleCall_1_1_0; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//param:
		//	type name=ID;
		public ParserRule getRule() { return rule; }

		//type name=ID
		public Group getGroup() { return cGroup; }

		//type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBeginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//block:
		//	{block} "begin" statements+=statement* "end";
		public ParserRule getRule() { return rule; }

		//{block} "begin" statements+=statement* "end"
		public Group getGroup() { return cGroup; }

		//{block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"begin"
		public Keyword getBeginKeyword_1() { return cBeginKeyword_1; }

		//statements+=statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type");
		private final Assignment cTypesAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypesAlternatives_0 = (Alternatives)cTypesAssignment.eContents().get(0);
		private final Keyword cTypesStringKeyword_0_0 = (Keyword)cTypesAlternatives_0.eContents().get(0);
		private final Keyword cTypesIntegerKeyword_0_1 = (Keyword)cTypesAlternatives_0.eContents().get(1);
		private final Keyword cTypesBooleanKeyword_0_2 = (Keyword)cTypesAlternatives_0.eContents().get(2);
		private final Keyword cTypesGraphKeyword_0_3 = (Keyword)cTypesAlternatives_0.eContents().get(3);
		private final Keyword cTypesVertexKeyword_0_4 = (Keyword)cTypesAlternatives_0.eContents().get(4);
		private final Keyword cTypesEdgeKeyword_0_5 = (Keyword)cTypesAlternatives_0.eContents().get(5);
		
		//type:
		//	types=("String" | "Integer" | "Boolean" | "Graph" | "Vertex" | "Edge");
		public ParserRule getRule() { return rule; }

		//types=("String" | "Integer" | "Boolean" | "Graph" | "Vertex" | "Edge")
		public Assignment getTypesAssignment() { return cTypesAssignment; }

		//"String" | "Integer" | "Boolean" | "Graph" | "Vertex" | "Edge"
		public Alternatives getTypesAlternatives_0() { return cTypesAlternatives_0; }

		//"String"
		public Keyword getTypesStringKeyword_0_0() { return cTypesStringKeyword_0_0; }

		//"Integer"
		public Keyword getTypesIntegerKeyword_0_1() { return cTypesIntegerKeyword_0_1; }

		//"Boolean"
		public Keyword getTypesBooleanKeyword_0_2() { return cTypesBooleanKeyword_0_2; }

		//"Graph"
		public Keyword getTypesGraphKeyword_0_3() { return cTypesGraphKeyword_0_3; }

		//"Vertex"
		public Keyword getTypesVertexKeyword_0_4() { return cTypesVertexKeyword_0_4; }

		//"Edge"
		public Keyword getTypesEdgeKeyword_0_5() { return cTypesEdgeKeyword_0_5; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cPostFixExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPostFixExpressionPostfixExprParserRuleCall_0_1_0 = (RuleCall)cPostFixExpressionAssignment_0_1.eContents().get(0);
		private final RuleCall cEndExprParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cEndExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStatementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cAssignmentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_2_1_0 = (RuleCall)cAssignmentsAssignment_2_1.eContents().get(0);
		private final RuleCall cEndExprParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStatementAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cReturnKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExprsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExprsExprParserRuleCall_3_2_0 = (RuleCall)cExprsAssignment_3_2.eContents().get(0);
		private final RuleCall cEndExprParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExprParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cColonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cStatementsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_4_3_0 = (RuleCall)cStatementsAssignment_4_3.eContents().get(0);
		private final Group cGroup_4_4 = (Group)cGroup_4.eContents().get(4);
		private final Keyword cElseKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cStatementsAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_4_4_1_0 = (RuleCall)cStatementsAssignment_4_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cForKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cParamParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cInKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cExprsAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cExprsExprParserRuleCall_5_3_0 = (RuleCall)cExprsAssignment_5_3.eContents().get(0);
		private final Keyword cColonKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cStatementsAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_5_0 = (RuleCall)cStatementsAssignment_5_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cWhileKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cExprParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cColonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cStatementsAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_6_3_0 = (RuleCall)cStatementsAssignment_6_3.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//statement:
		//	{statement} postFixExpression+=postfixExpr endExpr | declaration endExpr | {statement} assignments+=assignment endExpr
		//	| {statement} "return" exprs+=expr? endExpr | "if" expr ":" statements+=statement ("else" statements+=statement)? |
		//	"for" param "in" exprs+=expr ":" statements+=statement | "while" expr ":" statements+=statement | block;
		public ParserRule getRule() { return rule; }

		//{statement} postFixExpression+=postfixExpr endExpr | declaration endExpr | {statement} assignments+=assignment endExpr |
		//{statement} "return" exprs+=expr? endExpr | "if" expr ":" statements+=statement ("else" statements+=statement)? | "for"
		//param "in" exprs+=expr ":" statements+=statement | "while" expr ":" statements+=statement | block
		public Alternatives getAlternatives() { return cAlternatives; }

		//{statement} postFixExpression+=postfixExpr endExpr
		public Group getGroup_0() { return cGroup_0; }

		//{statement}
		public Action getStatementAction_0_0() { return cStatementAction_0_0; }

		//postFixExpression+=postfixExpr
		public Assignment getPostFixExpressionAssignment_0_1() { return cPostFixExpressionAssignment_0_1; }

		//postfixExpr
		public RuleCall getPostFixExpressionPostfixExprParserRuleCall_0_1_0() { return cPostFixExpressionPostfixExprParserRuleCall_0_1_0; }

		//endExpr
		public RuleCall getEndExprParserRuleCall_0_2() { return cEndExprParserRuleCall_0_2; }

		//declaration endExpr
		public Group getGroup_1() { return cGroup_1; }

		//declaration
		public RuleCall getDeclarationParserRuleCall_1_0() { return cDeclarationParserRuleCall_1_0; }

		//endExpr
		public RuleCall getEndExprParserRuleCall_1_1() { return cEndExprParserRuleCall_1_1; }

		//{statement} assignments+=assignment endExpr
		public Group getGroup_2() { return cGroup_2; }

		//{statement}
		public Action getStatementAction_2_0() { return cStatementAction_2_0; }

		//assignments+=assignment
		public Assignment getAssignmentsAssignment_2_1() { return cAssignmentsAssignment_2_1; }

		//assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_2_1_0() { return cAssignmentsAssignmentParserRuleCall_2_1_0; }

		//endExpr
		public RuleCall getEndExprParserRuleCall_2_2() { return cEndExprParserRuleCall_2_2; }

		//{statement} "return" exprs+=expr? endExpr
		public Group getGroup_3() { return cGroup_3; }

		//{statement}
		public Action getStatementAction_3_0() { return cStatementAction_3_0; }

		//"return"
		public Keyword getReturnKeyword_3_1() { return cReturnKeyword_3_1; }

		//exprs+=expr?
		public Assignment getExprsAssignment_3_2() { return cExprsAssignment_3_2; }

		//expr
		public RuleCall getExprsExprParserRuleCall_3_2_0() { return cExprsExprParserRuleCall_3_2_0; }

		//endExpr
		public RuleCall getEndExprParserRuleCall_3_3() { return cEndExprParserRuleCall_3_3; }

		//"if" expr ":" statements+=statement ("else" statements+=statement)?
		public Group getGroup_4() { return cGroup_4; }

		//"if"
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }

		//expr
		public RuleCall getExprParserRuleCall_4_1() { return cExprParserRuleCall_4_1; }

		//":"
		public Keyword getColonKeyword_4_2() { return cColonKeyword_4_2; }

		//statements+=statement
		public Assignment getStatementsAssignment_4_3() { return cStatementsAssignment_4_3; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_4_3_0() { return cStatementsStatementParserRuleCall_4_3_0; }

		//("else" statements+=statement)?
		public Group getGroup_4_4() { return cGroup_4_4; }

		//"else"
		public Keyword getElseKeyword_4_4_0() { return cElseKeyword_4_4_0; }

		//statements+=statement
		public Assignment getStatementsAssignment_4_4_1() { return cStatementsAssignment_4_4_1; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_4_4_1_0() { return cStatementsStatementParserRuleCall_4_4_1_0; }

		//"for" param "in" exprs+=expr ":" statements+=statement
		public Group getGroup_5() { return cGroup_5; }

		//"for"
		public Keyword getForKeyword_5_0() { return cForKeyword_5_0; }

		//param
		public RuleCall getParamParserRuleCall_5_1() { return cParamParserRuleCall_5_1; }

		//"in"
		public Keyword getInKeyword_5_2() { return cInKeyword_5_2; }

		//exprs+=expr
		public Assignment getExprsAssignment_5_3() { return cExprsAssignment_5_3; }

		//expr
		public RuleCall getExprsExprParserRuleCall_5_3_0() { return cExprsExprParserRuleCall_5_3_0; }

		//":"
		public Keyword getColonKeyword_5_4() { return cColonKeyword_5_4; }

		//statements+=statement
		public Assignment getStatementsAssignment_5_5() { return cStatementsAssignment_5_5; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_5_5_0() { return cStatementsStatementParserRuleCall_5_5_0; }

		//"while" expr ":" statements+=statement
		public Group getGroup_6() { return cGroup_6; }

		//"while"
		public Keyword getWhileKeyword_6_0() { return cWhileKeyword_6_0; }

		//expr
		public RuleCall getExprParserRuleCall_6_1() { return cExprParserRuleCall_6_1; }

		//":"
		public Keyword getColonKeyword_6_2() { return cColonKeyword_6_2; }

		//statements+=statement
		public Assignment getStatementsAssignment_6_3() { return cStatementsAssignment_6_3; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_6_3_0() { return cStatementsStatementParserRuleCall_6_3_0; }

		//block
		public RuleCall getBlockParserRuleCall_7() { return cBlockParserRuleCall_7; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVariableTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableTypeTypeParserRuleCall_0_0_0 = (RuleCall)cVariableTypeAssignment_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprsExprParserRuleCall_2_1_0 = (RuleCall)cExprsAssignment_2_1.eContents().get(0);
		
		//declaration:
		//	(variableType+=type "[]"?)+ name=ID ("=" exprs+=expr)?;
		public ParserRule getRule() { return rule; }

		//(variableType+=type "[]"?)+ name=ID ("=" exprs+=expr)?
		public Group getGroup() { return cGroup; }

		//(variableType+=type "[]"?)+
		public Group getGroup_0() { return cGroup_0; }

		//variableType+=type
		public Assignment getVariableTypeAssignment_0_0() { return cVariableTypeAssignment_0_0; }

		//type
		public RuleCall getVariableTypeTypeParserRuleCall_0_0_0() { return cVariableTypeTypeParserRuleCall_0_0_0; }

		//"[]"?
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_0_1() { return cLeftSquareBracketRightSquareBracketKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("=" exprs+=expr)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//exprs+=expr
		public Assignment getExprsAssignment_2_1() { return cExprsAssignment_2_1; }

		//expr
		public RuleCall getExprsExprParserRuleCall_2_1_0() { return cExprsExprParserRuleCall_2_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPostfixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprsExprParserRuleCall_2_0 = (RuleCall)cExprsAssignment_2.eContents().get(0);
		
		//assignment:
		//	postfixExpr "=" exprs+=expr;
		public ParserRule getRule() { return rule; }

		//postfixExpr "=" exprs+=expr
		public Group getGroup() { return cGroup; }

		//postfixExpr
		public RuleCall getPostfixExprParserRuleCall_0() { return cPostfixExprParserRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//exprs+=expr
		public Assignment getExprsAssignment_2() { return cExprsAssignment_2; }

		//expr
		public RuleCall getExprsExprParserRuleCall_2_0() { return cExprsExprParserRuleCall_2_0; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAndExprsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAndExprsAndExprParserRuleCall_1_1_0 = (RuleCall)cAndExprsAssignment_1_1.eContents().get(0);
		
		//expr:
		//	andExpr ("||" andExprs+=andExpr)*;
		public ParserRule getRule() { return rule; }

		//andExpr ("||" andExprs+=andExpr)*
		public Group getGroup() { return cGroup; }

		//andExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//("||" andExprs+=andExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//andExprs+=andExpr
		public Assignment getAndExprsAssignment_1_1() { return cAndExprsAssignment_1_1; }

		//andExpr
		public RuleCall getAndExprsAndExprParserRuleCall_1_1_0() { return cAndExprsAndExprParserRuleCall_1_1_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "andExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEqExprsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEqExprsEqExprParserRuleCall_1_1_0 = (RuleCall)cEqExprsAssignment_1_1.eContents().get(0);
		
		//andExpr:
		//	eqExpr ("&&" eqExprs+=eqExpr)*;
		public ParserRule getRule() { return rule; }

		//eqExpr ("&&" eqExprs+=eqExpr)*
		public Group getGroup() { return cGroup; }

		//eqExpr
		public RuleCall getEqExprParserRuleCall_0() { return cEqExprParserRuleCall_0; }

		//("&&" eqExprs+=eqExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//eqExprs+=eqExpr
		public Assignment getEqExprsAssignment_1_1() { return cEqExprsAssignment_1_1; }

		//eqExpr
		public RuleCall getEqExprsEqExprParserRuleCall_1_1_0() { return cEqExprsEqExprParserRuleCall_1_1_0; }
	}

	public class EqExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eqExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cRelExprsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelExprsRelExprParserRuleCall_1_1_0 = (RuleCall)cRelExprsAssignment_1_1.eContents().get(0);
		
		//eqExpr:
		//	relExpr (("==" | "!=") relExprs+=relExpr)*;
		public ParserRule getRule() { return rule; }

		//relExpr (("==" | "!=") relExprs+=relExpr)*
		public Group getGroup() { return cGroup; }

		//relExpr
		public RuleCall getRelExprParserRuleCall_0() { return cRelExprParserRuleCall_0; }

		//(("==" | "!=") relExprs+=relExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"==" | "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_1; }

		//relExprs+=relExpr
		public Assignment getRelExprsAssignment_1_1() { return cRelExprsAssignment_1_1; }

		//relExpr
		public RuleCall getRelExprsRelExprParserRuleCall_1_1_0() { return cRelExprsRelExprParserRuleCall_1_1_0; }
	}

	public class RelExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final Assignment cAddExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAddExprAddExprParserRuleCall_1_1_0 = (RuleCall)cAddExprAssignment_1_1.eContents().get(0);
		
		//relExpr:
		//	addExpr (("<" | ">" | "<=" | ">=") addExpr+=addExpr)*;
		public ParserRule getRule() { return rule; }

		//addExpr (("<" | ">" | "<=" | ">=") addExpr+=addExpr)*
		public Group getGroup() { return cGroup; }

		//addExpr
		public RuleCall getAddExprParserRuleCall_0() { return cAddExprParserRuleCall_0; }

		//(("<" | ">" | "<=" | ">=") addExpr+=addExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"<" | ">" | "<=" | ">="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_0() { return cLessThanSignKeyword_1_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_1() { return cGreaterThanSignKeyword_1_0_1; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_2() { return cLessThanSignEqualsSignKeyword_1_0_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_3() { return cGreaterThanSignEqualsSignKeyword_1_0_3; }

		//addExpr+=addExpr
		public Assignment getAddExprAssignment_1_1() { return cAddExprAssignment_1_1; }

		//addExpr
		public RuleCall getAddExprAddExprParserRuleCall_1_1_0() { return cAddExprAddExprParserRuleCall_1_1_0; }
	}

	public class AddExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "addExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSignTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cMulExprsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMulExprsMulExprParserRuleCall_1_1_0 = (RuleCall)cMulExprsAssignment_1_1.eContents().get(0);
		
		//addExpr:
		//	mulExpr (sign mulExprs+=mulExpr)*;
		public ParserRule getRule() { return rule; }

		//mulExpr (sign mulExprs+=mulExpr)*
		public Group getGroup() { return cGroup; }

		//mulExpr
		public RuleCall getMulExprParserRuleCall_0() { return cMulExprParserRuleCall_0; }

		//(sign mulExprs+=mulExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//sign
		public RuleCall getSignTerminalRuleCall_1_0() { return cSignTerminalRuleCall_1_0; }

		//mulExprs+=mulExpr
		public Assignment getMulExprsAssignment_1_1() { return cMulExprsAssignment_1_1; }

		//mulExpr
		public RuleCall getMulExprsMulExprParserRuleCall_1_1_0() { return cMulExprsMulExprParserRuleCall_1_1_0; }
	}

	public class MulExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mulExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtomsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAtomsAtomParserRuleCall_0_0 = (RuleCall)cAtomsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cAtomsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAtomsAtomParserRuleCall_1_1_0 = (RuleCall)cAtomsAssignment_1_1.eContents().get(0);
		
		//mulExpr:
		//	atoms+=atom (("*" | "/" | "%") atoms+=atom)*;
		public ParserRule getRule() { return rule; }

		//atoms+=atom (("*" | "/" | "%") atoms+=atom)*
		public Group getGroup() { return cGroup; }

		//atoms+=atom
		public Assignment getAtomsAssignment_0() { return cAtomsAssignment_0; }

		//atom
		public RuleCall getAtomsAtomParserRuleCall_0_0() { return cAtomsAtomParserRuleCall_0_0; }

		//(("*" | "/" | "%") atoms+=atom)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2() { return cPercentSignKeyword_1_0_2; }

		//atoms+=atom
		public Assignment getAtomsAssignment_1_1() { return cAtomsAssignment_1_1; }

		//atom
		public RuleCall getAtomsAtomParserRuleCall_1_1_0() { return cAtomsAtomParserRuleCall_1_1_0; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cAtomParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSignTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cExprParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExprParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cPostfixExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAtomAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cConstantsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_4_1_0 = (RuleCall)cConstantsAssignment_4_1.eContents().get(0);
		
		//atom:
		//	"!" atom | "(" sign expr ")" | "(" expr ")" | postfixExpr | {atom} constants+=constant;
		public ParserRule getRule() { return rule; }

		//"!" atom | "(" sign expr ")" | "(" expr ")" | postfixExpr | {atom} constants+=constant
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!" atom
		public Group getGroup_0() { return cGroup_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//atom
		public RuleCall getAtomParserRuleCall_0_1() { return cAtomParserRuleCall_0_1; }

		//"(" sign expr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//sign
		public RuleCall getSignTerminalRuleCall_1_1() { return cSignTerminalRuleCall_1_1; }

		//expr
		public RuleCall getExprParserRuleCall_1_2() { return cExprParserRuleCall_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//"(" expr ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//expr
		public RuleCall getExprParserRuleCall_2_1() { return cExprParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//postfixExpr
		public RuleCall getPostfixExprParserRuleCall_3() { return cPostfixExprParserRuleCall_3; }

		//{atom} constants+=constant
		public Group getGroup_4() { return cGroup_4; }

		//{atom}
		public Action getAtomAction_4_0() { return cAtomAction_4_0; }

		//constants+=constant
		public Assignment getConstantsAssignment_4_1() { return cConstantsAssignment_4_1; }

		//constant
		public RuleCall getConstantsConstantParserRuleCall_4_1_0() { return cConstantsConstantParserRuleCall_4_1_0; }
	}

	public class PostfixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "postfixExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cExistingVariableAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cExistingVariableDeclarationCrossReference_0_0_0 = (CrossReference)cExistingVariableAssignment_0_0.eContents().get(0);
		private final RuleCall cExistingVariableDeclarationIDTerminalRuleCall_0_0_0_1 = (RuleCall)cExistingVariableDeclarationCrossReference_0_0_0.eContents().get(1);
		private final Assignment cExistingVariableAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cExistingVariableParamCrossReference_0_1_0 = (CrossReference)cExistingVariableAssignment_0_1.eContents().get(0);
		private final RuleCall cExistingVariableParamIDTerminalRuleCall_0_1_0_1 = (RuleCall)cExistingVariableParamCrossReference_0_1_0.eContents().get(1);
		private final Assignment cExistingVariableAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final CrossReference cExistingVariableFunctionDefinitionCrossReference_0_2_0 = (CrossReference)cExistingVariableAssignment_0_2.eContents().get(0);
		private final RuleCall cExistingVariableFunctionDefinitionIDTerminalRuleCall_0_2_0_1 = (RuleCall)cExistingVariableFunctionDefinitionCrossReference_0_2_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cExpressionsExprParserRuleCall_1_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cExpressionsExprParserRuleCall_1_1_1_1_1_0 = (RuleCall)cExpressionsAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpressionsExprParserRuleCall_1_2_1_0 = (RuleCall)cExpressionsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//postfixExpr:
		//	(existingVariable=[declaration] | existingVariable=[param] | existingVariable=[functionDefinition]) ("." // to change
		//
		//	ID | "(" (expressions+=expr ("," expressions+=expr)*)? ")" | "[" expressions+=expr "]")*;
		public ParserRule getRule() { return rule; }

		//(existingVariable=[declaration] | existingVariable=[param] | existingVariable=[functionDefinition]) ("." // to change
		//
		//ID | "(" (expressions+=expr ("," expressions+=expr)*)? ")" | "[" expressions+=expr "]")*
		public Group getGroup() { return cGroup; }

		//existingVariable=[declaration] | existingVariable=[param] | existingVariable=[functionDefinition]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//existingVariable=[declaration]
		public Assignment getExistingVariableAssignment_0_0() { return cExistingVariableAssignment_0_0; }

		//[declaration]
		public CrossReference getExistingVariableDeclarationCrossReference_0_0_0() { return cExistingVariableDeclarationCrossReference_0_0_0; }

		//ID
		public RuleCall getExistingVariableDeclarationIDTerminalRuleCall_0_0_0_1() { return cExistingVariableDeclarationIDTerminalRuleCall_0_0_0_1; }

		//existingVariable=[param]
		public Assignment getExistingVariableAssignment_0_1() { return cExistingVariableAssignment_0_1; }

		//[param]
		public CrossReference getExistingVariableParamCrossReference_0_1_0() { return cExistingVariableParamCrossReference_0_1_0; }

		//ID
		public RuleCall getExistingVariableParamIDTerminalRuleCall_0_1_0_1() { return cExistingVariableParamIDTerminalRuleCall_0_1_0_1; }

		//existingVariable=[functionDefinition]
		public Assignment getExistingVariableAssignment_0_2() { return cExistingVariableAssignment_0_2; }

		//[functionDefinition]
		public CrossReference getExistingVariableFunctionDefinitionCrossReference_0_2_0() { return cExistingVariableFunctionDefinitionCrossReference_0_2_0; }

		//ID
		public RuleCall getExistingVariableFunctionDefinitionIDTerminalRuleCall_0_2_0_1() { return cExistingVariableFunctionDefinitionIDTerminalRuleCall_0_2_0_1; }

		//("." // to change
		//
		//ID | "(" (expressions+=expr ("," expressions+=expr)*)? ")" | "[" expressions+=expr "]")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"." // to change
		//
		//ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_0() { return cFullStopKeyword_1_0_0; }

		//// to change
		//
		//ID
		public RuleCall getIDTerminalRuleCall_1_0_1() { return cIDTerminalRuleCall_1_0_1; }

		//"(" (expressions+=expr ("," expressions+=expr)*)? ")"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }

		//(expressions+=expr ("," expressions+=expr)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//expressions+=expr
		public Assignment getExpressionsAssignment_1_1_1_0() { return cExpressionsAssignment_1_1_1_0; }

		//expr
		public RuleCall getExpressionsExprParserRuleCall_1_1_1_0_0() { return cExpressionsExprParserRuleCall_1_1_1_0_0; }

		//("," expressions+=expr)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }

		//expressions+=expr
		public Assignment getExpressionsAssignment_1_1_1_1_1() { return cExpressionsAssignment_1_1_1_1_1; }

		//expr
		public RuleCall getExpressionsExprParserRuleCall_1_1_1_1_1_0() { return cExpressionsExprParserRuleCall_1_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }

		//"[" expressions+=expr "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_0() { return cLeftSquareBracketKeyword_1_2_0; }

		//expressions+=expr
		public Assignment getExpressionsAssignment_1_2_1() { return cExpressionsAssignment_1_2_1; }

		//expr
		public RuleCall getExpressionsExprParserRuleCall_1_2_1_0() { return cExpressionsExprParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_2() { return cRightSquareBracketKeyword_1_2_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cTrueKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFloatAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFloatFLOATParserRuleCall_2_0 = (RuleCall)cFloatAssignment_2.eContents().get(0);
		private final Assignment cIntegerAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIntegerINTTerminalRuleCall_3_0 = (RuleCall)cIntegerAssignment_3.eContents().get(0);
		private final Assignment cStringAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStringSTRINGTerminalRuleCall_4_0 = (RuleCall)cStringAssignment_4.eContents().get(0);
		private final Assignment cNullAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cNullNullKeyword_5_0 = (Keyword)cNullAssignment_5.eContents().get(0);
		private final Assignment cInfinityAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cInfinityInftyKeyword_6_0 = (Keyword)cInfinityAssignment_6.eContents().get(0);
		
		//// BOOL
		//
		//constant:
		//	{constant} "true" // FLOAT(Real float cannot be used)
		//
		//	// INT and STRING
		//
		//	// NULL and INFINITY
		//
		//	| {constant} "false" | Float+=FLOAT | Integer=INT | String=STRING | Null="null" | Infinity="infty";
		public ParserRule getRule() { return rule; }

		//{constant} "true" // FLOAT(Real float cannot be used)
		//
		//// INT and STRING
		//
		//// NULL and INFINITY
		//
		//| {constant} "false" | Float+=FLOAT | Integer=INT | String=STRING | Null="null" | Infinity="infty"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{constant} "true"
		public Group getGroup_0() { return cGroup_0; }

		//{constant}
		public Action getConstantAction_0_0() { return cConstantAction_0_0; }

		//"true"
		public Keyword getTrueKeyword_0_1() { return cTrueKeyword_0_1; }

		//{constant} "false"
		public Group getGroup_1() { return cGroup_1; }

		//{constant}
		public Action getConstantAction_1_0() { return cConstantAction_1_0; }

		//"false"
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }

		//Float+=FLOAT
		public Assignment getFloatAssignment_2() { return cFloatAssignment_2; }

		//FLOAT
		public RuleCall getFloatFLOATParserRuleCall_2_0() { return cFloatFLOATParserRuleCall_2_0; }

		//Integer=INT
		public Assignment getIntegerAssignment_3() { return cIntegerAssignment_3; }

		//INT
		public RuleCall getIntegerINTTerminalRuleCall_3_0() { return cIntegerINTTerminalRuleCall_3_0; }

		//String=STRING
		public Assignment getStringAssignment_4() { return cStringAssignment_4; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_4_0() { return cStringSTRINGTerminalRuleCall_4_0; }

		//Null="null"
		public Assignment getNullAssignment_5() { return cNullAssignment_5; }

		//"null"
		public Keyword getNullNullKeyword_5_0() { return cNullNullKeyword_5_0; }

		//Infinity="infty"
		public Assignment getInfinityAssignment_6() { return cInfinityAssignment_6; }

		//"infty"
		public Keyword getInfinityInftyKeyword_6_0() { return cInfinityInftyKeyword_6_0; }
	}

	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFLOATAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFLOATINTTerminalRuleCall_0_0 = (RuleCall)cFLOATAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFLOATAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFLOATINTTerminalRuleCall_2_0 = (RuleCall)cFLOATAssignment_2.eContents().get(0);
		
		//FLOAT:
		//	FLOAT+=INT "." FLOAT+=INT+;
		public ParserRule getRule() { return rule; }

		//FLOAT+=INT "." FLOAT+=INT+
		public Group getGroup() { return cGroup; }

		//FLOAT+=INT
		public Assignment getFLOATAssignment_0() { return cFLOATAssignment_0; }

		//INT
		public RuleCall getFLOATINTTerminalRuleCall_0_0() { return cFLOATINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//FLOAT+=INT+
		public Assignment getFLOATAssignment_2() { return cFLOATAssignment_2; }

		//INT
		public RuleCall getFLOATINTTerminalRuleCall_2_0() { return cFLOATINTTerminalRuleCall_2_0; }
	}

	public class EndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "endExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		////war vorher terminal
		//
		//endExpr returns ecore::EString:
		//	"," | ";";
		public ParserRule getRule() { return rule; }

		//"," | ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	
	
	private ModelElements pModel;
	private FunctionDefinitionElements pFunctionDefinition;
	private MainFunctionElements pMainFunction;
	private FormalParamsElements pFormalParams;
	private ParamElements pParam;
	private BlockElements pBlock;
	private TypeElements pType;
	private StatementElements pStatement;
	private DeclarationElements pDeclaration;
	private AssignmentElements pAssignment;
	private ExprElements pExpr;
	private AndExprElements pAndExpr;
	private EqExprElements pEqExpr;
	private RelExprElements pRelExpr;
	private AddExprElements pAddExpr;
	private MulExprElements pMulExpr;
	private AtomElements pAtom;
	private PostfixExprElements pPostfixExpr;
	private ConstantElements pConstant;
	private FLOATElements pFLOAT;
	private EndExprElements pEndExpr;
	private TerminalRule tSign;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// @author Eduard Boos
	//
	//// Grammar used to generate the algorithmLanguage Editor.
	//
	//Model:
	//	functions+=functionDefinition* main=mainFunction;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//functionDefinition:
	//	name=ID "(" formalParams=formalParams? ")" (":" returnType=type)? blocks+=block;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//mainFunction:
	//	main="main" "(" formalParams=formalParams? ")" blocks+=block;
	public MainFunctionElements getMainFunctionAccess() {
		return (pMainFunction != null) ? pMainFunction : (pMainFunction = new MainFunctionElements());
	}
	
	public ParserRule getMainFunctionRule() {
		return getMainFunctionAccess().getRule();
	}

	//formalParams:
	//	params+=param ("," params+=param)*;
	public FormalParamsElements getFormalParamsAccess() {
		return (pFormalParams != null) ? pFormalParams : (pFormalParams = new FormalParamsElements());
	}
	
	public ParserRule getFormalParamsRule() {
		return getFormalParamsAccess().getRule();
	}

	//param:
	//	type name=ID;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//block:
	//	{block} "begin" statements+=statement* "end";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//type:
	//	types=("String" | "Integer" | "Boolean" | "Graph" | "Vertex" | "Edge");
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//statement:
	//	{statement} postFixExpression+=postfixExpr endExpr | declaration endExpr | {statement} assignments+=assignment endExpr
	//	| {statement} "return" exprs+=expr? endExpr | "if" expr ":" statements+=statement ("else" statements+=statement)? |
	//	"for" param "in" exprs+=expr ":" statements+=statement | "while" expr ":" statements+=statement | block;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//declaration:
	//	(variableType+=type "[]"?)+ name=ID ("=" exprs+=expr)?;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//assignment:
	//	postfixExpr "=" exprs+=expr;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//expr:
	//	andExpr ("||" andExprs+=andExpr)*;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//andExpr:
	//	eqExpr ("&&" eqExprs+=eqExpr)*;
	public AndExprElements getAndExprAccess() {
		return (pAndExpr != null) ? pAndExpr : (pAndExpr = new AndExprElements());
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//eqExpr:
	//	relExpr (("==" | "!=") relExprs+=relExpr)*;
	public EqExprElements getEqExprAccess() {
		return (pEqExpr != null) ? pEqExpr : (pEqExpr = new EqExprElements());
	}
	
	public ParserRule getEqExprRule() {
		return getEqExprAccess().getRule();
	}

	//relExpr:
	//	addExpr (("<" | ">" | "<=" | ">=") addExpr+=addExpr)*;
	public RelExprElements getRelExprAccess() {
		return (pRelExpr != null) ? pRelExpr : (pRelExpr = new RelExprElements());
	}
	
	public ParserRule getRelExprRule() {
		return getRelExprAccess().getRule();
	}

	//addExpr:
	//	mulExpr (sign mulExprs+=mulExpr)*;
	public AddExprElements getAddExprAccess() {
		return (pAddExpr != null) ? pAddExpr : (pAddExpr = new AddExprElements());
	}
	
	public ParserRule getAddExprRule() {
		return getAddExprAccess().getRule();
	}

	//mulExpr:
	//	atoms+=atom (("*" | "/" | "%") atoms+=atom)*;
	public MulExprElements getMulExprAccess() {
		return (pMulExpr != null) ? pMulExpr : (pMulExpr = new MulExprElements());
	}
	
	public ParserRule getMulExprRule() {
		return getMulExprAccess().getRule();
	}

	//atom:
	//	"!" atom | "(" sign expr ")" | "(" expr ")" | postfixExpr | {atom} constants+=constant;
	public AtomElements getAtomAccess() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//postfixExpr:
	//	(existingVariable=[declaration] | existingVariable=[param] | existingVariable=[functionDefinition]) ("." // to change
	//
	//	ID | "(" (expressions+=expr ("," expressions+=expr)*)? ")" | "[" expressions+=expr "]")*;
	public PostfixExprElements getPostfixExprAccess() {
		return (pPostfixExpr != null) ? pPostfixExpr : (pPostfixExpr = new PostfixExprElements());
	}
	
	public ParserRule getPostfixExprRule() {
		return getPostfixExprAccess().getRule();
	}

	//// BOOL
	//
	//constant:
	//	{constant} "true" // FLOAT(Real float cannot be used)
	//
	//	// INT and STRING
	//
	//	// NULL and INFINITY
	//
	//	| {constant} "false" | Float+=FLOAT | Integer=INT | String=STRING | Null="null" | Infinity="infty";
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//FLOAT:
	//	FLOAT+=INT "." FLOAT+=INT+;
	public FLOATElements getFLOATAccess() {
		return (pFLOAT != null) ? pFLOAT : (pFLOAT = new FLOATElements());
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}

	////war vorher terminal
	//
	//endExpr returns ecore::EString:
	//	"," | ";";
	public EndExprElements getEndExprAccess() {
		return (pEndExpr != null) ? pEndExpr : (pEndExpr = new EndExprElements());
	}
	
	public ParserRule getEndExprRule() {
		return getEndExprAccess().getRule();
	}

	////END OF Grammar
	//
	////Default Tokens from Xtext: ID,INT,STRING is used in our Grammar
	//
	////terminal ID : 
	//
	//// '^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//
	////terminal INT returns ecore::EInt: 
	//
	//// ('0'..'9')+;
	//
	////terminal STRING    : 
	//
	//// '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
	//
	//// "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"; 
	//
	////terminal ML_COMMENT    : 
	//
	//// '/ *' -> '* /';
	//
	////terminal SL_COMMENT : 
	//
	//// '//' !('\n'|'\r')* ('\r'? '\n')?;
	//
	////terminal WS    : 
	//
	//// (' '|'\t'|'\r'|'\n')+;
	//
	////terminal ANY_OTHER: 
	//
	//// .;  terminal sign:
	//	"+" | "-";
	public TerminalRule getSignRule() {
		return (tSign != null) ? tSign : (tSign = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sign"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
