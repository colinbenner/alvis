/*
* generated by Xtext
*/

package org.xtext.example.mydsl1.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFunctionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFunctionsFunctionDefinitionParserRuleCall_1_0_0 = (RuleCall)cFunctionsAssignment_1_0.eContents().get(0);
		private final Assignment cMainAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMainMainFunctionParserRuleCall_1_1_0 = (RuleCall)cMainAssignment_1_1.eContents().get(0);
		
		//Model:
		//	{Model} (functions+=functionDefinition* main=mainFunction);
		public ParserRule getRule() { return rule; }

		//{Model} (functions+=functionDefinition* main=mainFunction)
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//functions+=functionDefinition* main=mainFunction
		public Group getGroup_1() { return cGroup_1; }

		//functions+=functionDefinition*
		public Assignment getFunctionsAssignment_1_0() { return cFunctionsAssignment_1_0; }

		//functionDefinition
		public RuleCall getFunctionsFunctionDefinitionParserRuleCall_1_0_0() { return cFunctionsFunctionDefinitionParserRuleCall_1_0_0; }

		//main=mainFunction
		public Assignment getMainAssignment_1_1() { return cMainAssignment_1_1; }

		//mainFunction
		public RuleCall getMainMainFunctionParserRuleCall_1_1_0() { return cMainMainFunctionParserRuleCall_1_1_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "functionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormalParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormalParamsFormalParamsParserRuleCall_2_0 = (RuleCall)cFormalParamsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnTypeTypeParserRuleCall_4_1_0 = (RuleCall)cReturnTypeAssignment_4_1.eContents().get(0);
		private final Assignment cBlocksAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlocksBlockParserRuleCall_5_0 = (RuleCall)cBlocksAssignment_5.eContents().get(0);
		
		////functionDefinition*
		//
		////program    : functionDefinition*;
		//
		//functionDefinition:
		//	name=ID "(" formalParams=formalParams? ")" (":" returnType=type)? blocks+=block;
		public ParserRule getRule() { return rule; }

		//name=ID "(" formalParams=formalParams? ")" (":" returnType=type)? blocks+=block
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//formalParams=formalParams?
		public Assignment getFormalParamsAssignment_2() { return cFormalParamsAssignment_2; }

		//formalParams
		public RuleCall getFormalParamsFormalParamsParserRuleCall_2_0() { return cFormalParamsFormalParamsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(":" returnType=type)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//returnType=type
		public Assignment getReturnTypeAssignment_4_1() { return cReturnTypeAssignment_4_1; }

		//type
		public RuleCall getReturnTypeTypeParserRuleCall_4_1_0() { return cReturnTypeTypeParserRuleCall_4_1_0; }

		//blocks+=block
		public Assignment getBlocksAssignment_5() { return cBlocksAssignment_5; }

		//block
		public RuleCall getBlocksBlockParserRuleCall_5_0() { return cBlocksBlockParserRuleCall_5_0; }
	}

	public class MainFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mainFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormalParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormalParamsFormalParamsParserRuleCall_1_0 = (RuleCall)cFormalParamsAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlocksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlocksBlockParserRuleCall_3_0 = (RuleCall)cBlocksAssignment_3.eContents().get(0);
		
		//mainFunction:
		//	"main(" formalParams=formalParams? ")" blocks+=block;
		public ParserRule getRule() { return rule; }

		//"main(" formalParams=formalParams? ")" blocks+=block
		public Group getGroup() { return cGroup; }

		//"main("
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }

		//formalParams=formalParams?
		public Assignment getFormalParamsAssignment_1() { return cFormalParamsAssignment_1; }

		//formalParams
		public RuleCall getFormalParamsFormalParamsParserRuleCall_1_0() { return cFormalParamsFormalParamsParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//blocks+=block
		public Assignment getBlocksAssignment_3() { return cBlocksAssignment_3; }

		//block
		public RuleCall getBlocksBlockParserRuleCall_3_0() { return cBlocksBlockParserRuleCall_3_0; }
	}

	public class FormalParamsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "formalParams");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		
		//formalParams:
		//	params+=param ("," params+=param)*;
		public ParserRule getRule() { return rule; }

		//params+=param ("," params+=param)*
		public Group getGroup() { return cGroup; }

		//params+=param
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }

		//param
		public RuleCall getParamsParamParserRuleCall_0_0() { return cParamsParamParserRuleCall_0_0; }

		//("," params+=param)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//params+=param
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//param
		public RuleCall getParamsParamParserRuleCall_1_1_0() { return cParamsParamParserRuleCall_1_1_0; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////((type=[declaration])|'String'|'Integer'|'Boolean') name=ID;
		//
		//param:
		//	type name=ID;
		public ParserRule getRule() { return rule; }

		//type name=ID
		public Group getGroup() { return cGroup; }

		//type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBeginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//block:
		//	{block} "begin" statements+=statement* "end";
		public ParserRule getRule() { return rule; }

		//{block} "begin" statements+=statement* "end"
		public Group getGroup() { return cGroup; }

		//{block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"begin"
		public Keyword getBeginKeyword_1() { return cBeginKeyword_1; }

		//statements+=statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cTypeDeclarationCrossReference_1_0_0 = (CrossReference)cTypeAssignment_1_0.eContents().get(0);
		private final RuleCall cTypeDeclarationIDTerminalRuleCall_1_0_0_1 = (RuleCall)cTypeDeclarationCrossReference_1_0_0.eContents().get(1);
		private final Keyword cStringKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cIntegerKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cBooleanKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//type:
		//	{type} (type=[declaration] | "String" | "Integer" | "Boolean");
		public ParserRule getRule() { return rule; }

		//{type} (type=[declaration] | "String" | "Integer" | "Boolean")
		public Group getGroup() { return cGroup; }

		//{type}
		public Action getTypeAction_0() { return cTypeAction_0; }

		//type=[declaration] | "String" | "Integer" | "Boolean"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//type=[declaration]
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }

		//[declaration]
		public CrossReference getTypeDeclarationCrossReference_1_0_0() { return cTypeDeclarationCrossReference_1_0_0; }

		//ID
		public RuleCall getTypeDeclarationIDTerminalRuleCall_1_0_0_1() { return cTypeDeclarationIDTerminalRuleCall_1_0_0_1; }

		//"String"
		public Keyword getStringKeyword_1_1() { return cStringKeyword_1_1; }

		//"Integer"
		public Keyword getIntegerKeyword_1_2() { return cIntegerKeyword_1_2; }

		//"Boolean"
		public Keyword getBooleanKeyword_1_3() { return cBooleanKeyword_1_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDeclarationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cEndExprTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cExprParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cEndExprTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cAssignmentParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cEndExprTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cReturnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExprParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cEndExprTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cIfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExprParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Keyword cColonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Group cGroup_4_4 = (Group)cGroup_4.eContents().get(4);
		private final Keyword cElseKeyword_4_4_0 = (Keyword)cGroup_4_4.eContents().get(0);
		private final Assignment cStatementsAssignment_4_4_1 = (Assignment)cGroup_4_4.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_4_4_1_0 = (RuleCall)cStatementsAssignment_4_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cForKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cParamParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cInKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cExprParserRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final Keyword cColonKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cStatementsAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_5_0 = (RuleCall)cStatementsAssignment_5_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cWhileKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cExprParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cColonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final RuleCall cBlockParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cTypesAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final CrossReference cTypesFunctionDefinitionCrossReference_8_0_0 = (CrossReference)cTypesAssignment_8_0.eContents().get(0);
		private final RuleCall cTypesFunctionDefinitionIDTerminalRuleCall_8_0_0_1 = (RuleCall)cTypesFunctionDefinitionCrossReference_8_0_0.eContents().get(1);
		private final Assignment cNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_8_1_0 = (RuleCall)cNameAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cTypesAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final CrossReference cTypesStatementCrossReference_9_0_0 = (CrossReference)cTypesAssignment_9_0.eContents().get(0);
		private final RuleCall cTypesStatementIDTerminalRuleCall_9_0_0_1 = (RuleCall)cTypesStatementCrossReference_9_0_0.eContents().get(1);
		private final Assignment cNameAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_9_1_0 = (RuleCall)cNameAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cMainsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cNameAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_10_1_0 = (RuleCall)cNameAssignment_10_1.eContents().get(0);
		
		//statement:
		//	declaration endExpr | expr endExpr | assignment endExpr | "return" expr? endExpr | "if" expr ":" statement ("else"
		//	statements+=statement)? | "for" param "in" expr ":" statements+=statement | "while" expr ":" statement | block |
		//	types=[functionDefinition] name=ID | types=[statement] name=ID | "mains" name=ID;
		public ParserRule getRule() { return rule; }

		//declaration endExpr | expr endExpr | assignment endExpr | "return" expr? endExpr | "if" expr ":" statement ("else"
		//statements+=statement)? | "for" param "in" expr ":" statements+=statement | "while" expr ":" statement | block |
		//types=[functionDefinition] name=ID | types=[statement] name=ID | "mains" name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//declaration endExpr
		public Group getGroup_0() { return cGroup_0; }

		//declaration
		public RuleCall getDeclarationParserRuleCall_0_0() { return cDeclarationParserRuleCall_0_0; }

		//endExpr
		public RuleCall getEndExprTerminalRuleCall_0_1() { return cEndExprTerminalRuleCall_0_1; }

		//expr endExpr
		public Group getGroup_1() { return cGroup_1; }

		//expr
		public RuleCall getExprParserRuleCall_1_0() { return cExprParserRuleCall_1_0; }

		//endExpr
		public RuleCall getEndExprTerminalRuleCall_1_1() { return cEndExprTerminalRuleCall_1_1; }

		//assignment endExpr
		public Group getGroup_2() { return cGroup_2; }

		//assignment
		public RuleCall getAssignmentParserRuleCall_2_0() { return cAssignmentParserRuleCall_2_0; }

		//endExpr
		public RuleCall getEndExprTerminalRuleCall_2_1() { return cEndExprTerminalRuleCall_2_1; }

		//"return" expr? endExpr
		public Group getGroup_3() { return cGroup_3; }

		//"return"
		public Keyword getReturnKeyword_3_0() { return cReturnKeyword_3_0; }

		//expr?
		public RuleCall getExprParserRuleCall_3_1() { return cExprParserRuleCall_3_1; }

		//endExpr
		public RuleCall getEndExprTerminalRuleCall_3_2() { return cEndExprTerminalRuleCall_3_2; }

		//"if" expr ":" statement ("else" statements+=statement)?
		public Group getGroup_4() { return cGroup_4; }

		//"if"
		public Keyword getIfKeyword_4_0() { return cIfKeyword_4_0; }

		//expr
		public RuleCall getExprParserRuleCall_4_1() { return cExprParserRuleCall_4_1; }

		//":"
		public Keyword getColonKeyword_4_2() { return cColonKeyword_4_2; }

		//statement
		public RuleCall getStatementParserRuleCall_4_3() { return cStatementParserRuleCall_4_3; }

		//("else" statements+=statement)?
		public Group getGroup_4_4() { return cGroup_4_4; }

		//"else"
		public Keyword getElseKeyword_4_4_0() { return cElseKeyword_4_4_0; }

		//statements+=statement
		public Assignment getStatementsAssignment_4_4_1() { return cStatementsAssignment_4_4_1; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_4_4_1_0() { return cStatementsStatementParserRuleCall_4_4_1_0; }

		//"for" param "in" expr ":" statements+=statement
		public Group getGroup_5() { return cGroup_5; }

		//"for"
		public Keyword getForKeyword_5_0() { return cForKeyword_5_0; }

		//param
		public RuleCall getParamParserRuleCall_5_1() { return cParamParserRuleCall_5_1; }

		//"in"
		public Keyword getInKeyword_5_2() { return cInKeyword_5_2; }

		//expr
		public RuleCall getExprParserRuleCall_5_3() { return cExprParserRuleCall_5_3; }

		//":"
		public Keyword getColonKeyword_5_4() { return cColonKeyword_5_4; }

		//statements+=statement
		public Assignment getStatementsAssignment_5_5() { return cStatementsAssignment_5_5; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_5_5_0() { return cStatementsStatementParserRuleCall_5_5_0; }

		//"while" expr ":" statement
		public Group getGroup_6() { return cGroup_6; }

		//"while"
		public Keyword getWhileKeyword_6_0() { return cWhileKeyword_6_0; }

		//expr
		public RuleCall getExprParserRuleCall_6_1() { return cExprParserRuleCall_6_1; }

		//":"
		public Keyword getColonKeyword_6_2() { return cColonKeyword_6_2; }

		//statement
		public RuleCall getStatementParserRuleCall_6_3() { return cStatementParserRuleCall_6_3; }

		//block
		public RuleCall getBlockParserRuleCall_7() { return cBlockParserRuleCall_7; }

		//types=[functionDefinition] name=ID
		public Group getGroup_8() { return cGroup_8; }

		//types=[functionDefinition]
		public Assignment getTypesAssignment_8_0() { return cTypesAssignment_8_0; }

		//[functionDefinition]
		public CrossReference getTypesFunctionDefinitionCrossReference_8_0_0() { return cTypesFunctionDefinitionCrossReference_8_0_0; }

		//ID
		public RuleCall getTypesFunctionDefinitionIDTerminalRuleCall_8_0_0_1() { return cTypesFunctionDefinitionIDTerminalRuleCall_8_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_8_1() { return cNameAssignment_8_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_8_1_0() { return cNameIDTerminalRuleCall_8_1_0; }

		//types=[statement] name=ID
		public Group getGroup_9() { return cGroup_9; }

		//types=[statement]
		public Assignment getTypesAssignment_9_0() { return cTypesAssignment_9_0; }

		//[statement]
		public CrossReference getTypesStatementCrossReference_9_0_0() { return cTypesStatementCrossReference_9_0_0; }

		//ID
		public RuleCall getTypesStatementIDTerminalRuleCall_9_0_0_1() { return cTypesStatementIDTerminalRuleCall_9_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_9_1() { return cNameAssignment_9_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_9_1_0() { return cNameIDTerminalRuleCall_9_1_0; }

		//"mains" name=ID
		public Group getGroup_10() { return cGroup_10; }

		//"mains"
		public Keyword getMainsKeyword_10_0() { return cMainsKeyword_10_0; }

		//name=ID
		public Assignment getNameAssignment_10_1() { return cNameAssignment_10_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_10_1_0() { return cNameIDTerminalRuleCall_10_1_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////thissone : {thissone} [thisone];
		//
		////    ;
		//
		//declaration:
		//	name=ID "=" expr;
		public ParserRule getRule() { return rule; }

		//name=ID "=" expr
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPostfixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//assignment returns ecore::EString:
		//	postfixExpr "=" expr;
		public ParserRule getRule() { return rule; }

		//postfixExpr "=" expr
		public Group getGroup() { return cGroup; }

		//postfixExpr
		public RuleCall getPostfixExprParserRuleCall_0() { return cPostfixExprParserRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAndExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//expr returns ecore::EString:
		//	andExpr ("||" andExpr)*;
		public ParserRule getRule() { return rule; }

		//andExpr ("||" andExpr)*
		public Group getGroup() { return cGroup; }

		//andExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//("||" andExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//andExpr
		public RuleCall getAndExprParserRuleCall_1_1() { return cAndExprParserRuleCall_1_1; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "andExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEqExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//andExpr returns ecore::EString:
		//	eqExpr ("&&" eqExpr)*;
		public ParserRule getRule() { return rule; }

		//eqExpr ("&&" eqExpr)*
		public Group getGroup() { return cGroup; }

		//eqExpr
		public RuleCall getEqExprParserRuleCall_0() { return cEqExprParserRuleCall_0; }

		//("&&" eqExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//eqExpr
		public RuleCall getEqExprParserRuleCall_1_1() { return cEqExprParserRuleCall_1_1; }
	}

	public class EqExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "eqExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cRelExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//eqExpr returns ecore::EString:
		//	relExpr (("==" | "!=") relExpr)*;
		public ParserRule getRule() { return rule; }

		//relExpr (("==" | "!=") relExpr)*
		public Group getGroup() { return cGroup; }

		//relExpr
		public RuleCall getRelExprParserRuleCall_0() { return cRelExprParserRuleCall_0; }

		//(("==" | "!=") relExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"==" | "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_1; }

		//relExpr
		public RuleCall getRelExprParserRuleCall_1_1() { return cRelExprParserRuleCall_1_1; }
	}

	public class RelExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cAddExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//relExpr returns ecore::EString:
		//	addExpr (("<" | ">" | "<=" | ">=") addExpr)*;
		public ParserRule getRule() { return rule; }

		//addExpr (("<" | ">" | "<=" | ">=") addExpr)*
		public Group getGroup() { return cGroup; }

		//addExpr
		public RuleCall getAddExprParserRuleCall_0() { return cAddExprParserRuleCall_0; }

		//(("<" | ">" | "<=" | ">=") addExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"<" | ">" | "<=" | ">="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_0() { return cLessThanSignKeyword_1_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_1() { return cGreaterThanSignKeyword_1_0_1; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_2() { return cLessThanSignEqualsSignKeyword_1_0_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_3() { return cGreaterThanSignEqualsSignKeyword_1_0_3; }

		//addExpr
		public RuleCall getAddExprParserRuleCall_1_1() { return cAddExprParserRuleCall_1_1; }
	}

	public class AddExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "addExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cMulExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//addExpr returns ecore::EString:
		//	mulExpr (("+" | "-") mulExpr)*;
		public ParserRule getRule() { return rule; }

		//mulExpr (("+" | "-") mulExpr)*
		public Group getGroup() { return cGroup; }

		//mulExpr
		public RuleCall getMulExprParserRuleCall_0() { return cMulExprParserRuleCall_0; }

		//(("+" | "-") mulExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//mulExpr
		public RuleCall getMulExprParserRuleCall_1_1() { return cMulExprParserRuleCall_1_1; }
	}

	public class MulExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mulExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cAtomParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//mulExpr returns ecore::EString:
		//	atom (("*" | "/" | "%") atom)*;
		public ParserRule getRule() { return rule; }

		//atom (("*" | "/" | "%") atom)*
		public Group getGroup() { return cGroup; }

		//atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }

		//(("*" | "/" | "%") atom)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2() { return cPercentSignKeyword_1_0_2; }

		//atom
		public RuleCall getAtomParserRuleCall_1_1() { return cAtomParserRuleCall_1_1; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cAtomParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final RuleCall cExprParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExprParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cPostfixExprParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstantTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//atom returns ecore::EString:
		//	"!" atom //    | '(' sign expr ')'
		//
		//	| "(" ("+" | "-") expr ")" | "(" expr ")" | postfixExpr | constant;
		public ParserRule getRule() { return rule; }

		//"!" atom //    | '(' sign expr ')'
		//
		//| "(" ("+" | "-") expr ")" | "(" expr ")" | postfixExpr | constant
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!" atom
		public Group getGroup_0() { return cGroup_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//atom
		public RuleCall getAtomParserRuleCall_0_1() { return cAtomParserRuleCall_0_1; }

		//"(" ("+" | "-") expr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//"+" | "-"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_1() { return cHyphenMinusKeyword_1_1_1; }

		//expr
		public RuleCall getExprParserRuleCall_1_2() { return cExprParserRuleCall_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//"(" expr ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//expr
		public RuleCall getExprParserRuleCall_2_1() { return cExprParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//postfixExpr
		public RuleCall getPostfixExprParserRuleCall_3() { return cPostfixExprParserRuleCall_3; }

		//constant
		public RuleCall getConstantTerminalRuleCall_4() { return cConstantTerminalRuleCall_4; }
	}

	public class PostfixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "postfixExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPRINTKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_0_1 = (RuleCall)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cExprParserRuleCall_1_1_1_1_0 = (RuleCall)cGroup_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_1_1 = (Group)cGroup_1_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1_1_1_1_1 = (RuleCall)cGroup_1_1_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1_2_1 = (RuleCall)cGroup_1_1_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		
		//postfixExpr returns ecore::EString:
		//	"PRINT" "(" expr ")" | ID ("." ID | "(" (expr ("," expr)*)? ")" | "[" expr "]")*;
		public ParserRule getRule() { return rule; }

		//"PRINT" "(" expr ")" | ID ("." ID | "(" (expr ("," expr)*)? ")" | "[" expr "]")*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"PRINT" "(" expr ")"
		public Group getGroup_0() { return cGroup_0; }

		//"PRINT"
		public Keyword getPRINTKeyword_0_0() { return cPRINTKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//expr
		public RuleCall getExprParserRuleCall_0_2() { return cExprParserRuleCall_0_2; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//ID ("." ID | "(" (expr ("," expr)*)? ")" | "[" expr "]")*
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//("." ID | "(" (expr ("," expr)*)? ")" | "[" expr "]")*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"." ID
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_0_0() { return cFullStopKeyword_1_1_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0_1() { return cIDTerminalRuleCall_1_1_0_1; }

		//"(" (expr ("," expr)*)? ")"
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_1_0() { return cLeftParenthesisKeyword_1_1_1_0; }

		//(expr ("," expr)*)?
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//expr
		public RuleCall getExprParserRuleCall_1_1_1_1_0() { return cExprParserRuleCall_1_1_1_1_0; }

		//("," expr)*
		public Group getGroup_1_1_1_1_1() { return cGroup_1_1_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_1_0; }

		//expr
		public RuleCall getExprParserRuleCall_1_1_1_1_1_1() { return cExprParserRuleCall_1_1_1_1_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_1_2() { return cRightParenthesisKeyword_1_1_1_2; }

		//"[" expr "]"
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_2_0() { return cLeftSquareBracketKeyword_1_1_2_0; }

		//expr
		public RuleCall getExprParserRuleCall_1_1_2_1() { return cExprParserRuleCall_1_1_2_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2_2() { return cRightSquareBracketKeyword_1_1_2_2; }
	}
	
	
	private ModelElements pModel;
	private FunctionDefinitionElements pFunctionDefinition;
	private MainFunctionElements pMainFunction;
	private FormalParamsElements pFormalParams;
	private ParamElements pParam;
	private BlockElements pBlock;
	private TypeElements pType;
	private StatementElements pStatement;
	private DeclarationElements pDeclaration;
	private AssignmentElements pAssignment;
	private ExprElements pExpr;
	private AndExprElements pAndExpr;
	private EqExprElements pEqExpr;
	private RelExprElements pRelExpr;
	private AddExprElements pAddExpr;
	private MulExprElements pMulExpr;
	private AtomElements pAtom;
	private PostfixExprElements pPostfixExpr;
	private TerminalRule tConstant;
	private TerminalRule tEndExpr;
	private TerminalRule tID;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} (functions+=functionDefinition* main=mainFunction);
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	////functionDefinition*
	//
	////program    : functionDefinition*;
	//
	//functionDefinition:
	//	name=ID "(" formalParams=formalParams? ")" (":" returnType=type)? blocks+=block;
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//mainFunction:
	//	"main(" formalParams=formalParams? ")" blocks+=block;
	public MainFunctionElements getMainFunctionAccess() {
		return (pMainFunction != null) ? pMainFunction : (pMainFunction = new MainFunctionElements());
	}
	
	public ParserRule getMainFunctionRule() {
		return getMainFunctionAccess().getRule();
	}

	//formalParams:
	//	params+=param ("," params+=param)*;
	public FormalParamsElements getFormalParamsAccess() {
		return (pFormalParams != null) ? pFormalParams : (pFormalParams = new FormalParamsElements());
	}
	
	public ParserRule getFormalParamsRule() {
		return getFormalParamsAccess().getRule();
	}

	////((type=[declaration])|'String'|'Integer'|'Boolean') name=ID;
	//
	//param:
	//	type name=ID;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//block:
	//	{block} "begin" statements+=statement* "end";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//type:
	//	{type} (type=[declaration] | "String" | "Integer" | "Boolean");
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//statement:
	//	declaration endExpr | expr endExpr | assignment endExpr | "return" expr? endExpr | "if" expr ":" statement ("else"
	//	statements+=statement)? | "for" param "in" expr ":" statements+=statement | "while" expr ":" statement | block |
	//	types=[functionDefinition] name=ID | types=[statement] name=ID | "mains" name=ID;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	////thissone : {thissone} [thisone];
	//
	////    ;
	//
	//declaration:
	//	name=ID "=" expr;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//assignment returns ecore::EString:
	//	postfixExpr "=" expr;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//expr returns ecore::EString:
	//	andExpr ("||" andExpr)*;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//andExpr returns ecore::EString:
	//	eqExpr ("&&" eqExpr)*;
	public AndExprElements getAndExprAccess() {
		return (pAndExpr != null) ? pAndExpr : (pAndExpr = new AndExprElements());
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//eqExpr returns ecore::EString:
	//	relExpr (("==" | "!=") relExpr)*;
	public EqExprElements getEqExprAccess() {
		return (pEqExpr != null) ? pEqExpr : (pEqExpr = new EqExprElements());
	}
	
	public ParserRule getEqExprRule() {
		return getEqExprAccess().getRule();
	}

	//relExpr returns ecore::EString:
	//	addExpr (("<" | ">" | "<=" | ">=") addExpr)*;
	public RelExprElements getRelExprAccess() {
		return (pRelExpr != null) ? pRelExpr : (pRelExpr = new RelExprElements());
	}
	
	public ParserRule getRelExprRule() {
		return getRelExprAccess().getRule();
	}

	//addExpr returns ecore::EString:
	//	mulExpr (("+" | "-") mulExpr)*;
	public AddExprElements getAddExprAccess() {
		return (pAddExpr != null) ? pAddExpr : (pAddExpr = new AddExprElements());
	}
	
	public ParserRule getAddExprRule() {
		return getAddExprAccess().getRule();
	}

	//mulExpr returns ecore::EString:
	//	atom (("*" | "/" | "%") atom)*;
	public MulExprElements getMulExprAccess() {
		return (pMulExpr != null) ? pMulExpr : (pMulExpr = new MulExprElements());
	}
	
	public ParserRule getMulExprRule() {
		return getMulExprAccess().getRule();
	}

	//atom returns ecore::EString:
	//	"!" atom //    | '(' sign expr ')'
	//
	//	| "(" ("+" | "-") expr ")" | "(" expr ")" | postfixExpr | constant;
	public AtomElements getAtomAccess() {
		return (pAtom != null) ? pAtom : (pAtom = new AtomElements());
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//postfixExpr returns ecore::EString:
	//	"PRINT" "(" expr ")" | ID ("." ID | "(" (expr ("," expr)*)? ")" | "[" expr "]")*;
	public PostfixExprElements getPostfixExprAccess() {
		return (pPostfixExpr != null) ? pPostfixExpr : (pPostfixExpr = new PostfixExprElements());
	}
	
	public ParserRule getPostfixExprRule() {
		return getPostfixExprAccess().getRule();
	}

	////String geht im moment nicht richtig
	//
	////    : 'BOOL'
	//
	//terminal constant:
	//	"true" //    | 'FLOAT'
	//
	//	//    | INT
	//
	//	//    | '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\') | ~('\\'|'"') )* '"' 
	//
	//	//    | ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');
	//
	//	//    | 'NULL'
	//
	//	//    | 'INFTY'
	//
	//	| "false" | "0".."9"+ "." "0".."9"* | "0".."9"+ | "STRING" | "null" | "infty";
	public TerminalRule getConstantRule() {
		return (tConstant != null) ? tConstant : (tConstant = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "constant"));
	} 

	//terminal endExpr:
	//	"," | ";";
	public TerminalRule getEndExprRule() {
		return (tEndExpr != null) ? tEndExpr : (tEndExpr = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "endExpr"));
	} 

	////terminal sign: '+' | '-' ;
	//
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "0".."9" | "_")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
