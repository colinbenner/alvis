/*
* generated by Xtext
*/
package org.xtext.example.mydsl1.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl1.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.example.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.example.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getEqExprAccess().getAlternatives_1_0(), "rule__EqExpr__Alternatives_1_0");
					put(grammarAccess.getRelExprAccess().getAlternatives_1_0(), "rule__RelExpr__Alternatives_1_0");
					put(grammarAccess.getAddExprAccess().getAlternatives_1_0(), "rule__AddExpr__Alternatives_1_0");
					put(grammarAccess.getMulExprAccess().getAlternatives_1_0(), "rule__MulExpr__Alternatives_1_0");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getAtomAccess().getAlternatives_1_1(), "rule__Atom__Alternatives_1_1");
					put(grammarAccess.getPostfixExprAccess().getAlternatives(), "rule__PostfixExpr__Alternatives");
					put(grammarAccess.getPostfixExprAccess().getAlternatives_1_1(), "rule__PostfixExpr__Alternatives_1_1");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_1(), "rule__Model__Group_1__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup(), "rule__FunctionDefinition__Group__0");
					put(grammarAccess.getFunctionDefinitionAccess().getGroup_5(), "rule__FunctionDefinition__Group_5__0");
					put(grammarAccess.getMainFunctionAccess().getGroup(), "rule__MainFunction__Group__0");
					put(grammarAccess.getFormalParamsAccess().getGroup(), "rule__FormalParams__Group__0");
					put(grammarAccess.getFormalParamsAccess().getGroup_1(), "rule__FormalParams__Group_1__0");
					put(grammarAccess.getParamAccess().getGroup(), "rule__Param__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_0(), "rule__Statement__Group_0__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getStatementAccess().getGroup_2(), "rule__Statement__Group_2__0");
					put(grammarAccess.getStatementAccess().getGroup_3(), "rule__Statement__Group_3__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getExprAccess().getGroup(), "rule__Expr__Group__0");
					put(grammarAccess.getExprAccess().getGroup_1(), "rule__Expr__Group_1__0");
					put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
					put(grammarAccess.getAndExprAccess().getGroup_1(), "rule__AndExpr__Group_1__0");
					put(grammarAccess.getEqExprAccess().getGroup(), "rule__EqExpr__Group__0");
					put(grammarAccess.getEqExprAccess().getGroup_1(), "rule__EqExpr__Group_1__0");
					put(grammarAccess.getRelExprAccess().getGroup(), "rule__RelExpr__Group__0");
					put(grammarAccess.getRelExprAccess().getGroup_1(), "rule__RelExpr__Group_1__0");
					put(grammarAccess.getAddExprAccess().getGroup(), "rule__AddExpr__Group__0");
					put(grammarAccess.getAddExprAccess().getGroup_1(), "rule__AddExpr__Group_1__0");
					put(grammarAccess.getMulExprAccess().getGroup(), "rule__MulExpr__Group__0");
					put(grammarAccess.getMulExprAccess().getGroup_1(), "rule__MulExpr__Group_1__0");
					put(grammarAccess.getAtomAccess().getGroup_0(), "rule__Atom__Group_0__0");
					put(grammarAccess.getAtomAccess().getGroup_1(), "rule__Atom__Group_1__0");
					put(grammarAccess.getAtomAccess().getGroup_2(), "rule__Atom__Group_2__0");
					put(grammarAccess.getPostfixExprAccess().getGroup_0(), "rule__PostfixExpr__Group_0__0");
					put(grammarAccess.getPostfixExprAccess().getGroup_1(), "rule__PostfixExpr__Group_1__0");
					put(grammarAccess.getPostfixExprAccess().getGroup_1_1_0(), "rule__PostfixExpr__Group_1_1_0__0");
					put(grammarAccess.getPostfixExprAccess().getGroup_1_1_1(), "rule__PostfixExpr__Group_1_1_1__0");
					put(grammarAccess.getPostfixExprAccess().getGroup_1_1_1_1(), "rule__PostfixExpr__Group_1_1_1_1__0");
					put(grammarAccess.getPostfixExprAccess().getGroup_1_1_1_1_1(), "rule__PostfixExpr__Group_1_1_1_1_1__0");
					put(grammarAccess.getPostfixExprAccess().getGroup_1_1_2(), "rule__PostfixExpr__Group_1_1_2__0");
					put(grammarAccess.getModelAccess().getFunctionsAssignment_1_0(), "rule__Model__FunctionsAssignment_1_0");
					put(grammarAccess.getModelAccess().getMainAssignment_1_1(), "rule__Model__MainAssignment_1_1");
					put(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_1(), "rule__FunctionDefinition__NameAssignment_1");
					put(grammarAccess.getFunctionDefinitionAccess().getFormalParamsAssignment_3(), "rule__FunctionDefinition__FormalParamsAssignment_3");
					put(grammarAccess.getFunctionDefinitionAccess().getIdsAssignment_5_1(), "rule__FunctionDefinition__IdsAssignment_5_1");
					put(grammarAccess.getFunctionDefinitionAccess().getBlocksAssignment_6(), "rule__FunctionDefinition__BlocksAssignment_6");
					put(grammarAccess.getMainFunctionAccess().getBlocksAssignment_3(), "rule__MainFunction__BlocksAssignment_3");
					put(grammarAccess.getFormalParamsAccess().getParamsAssignment_0(), "rule__FormalParams__ParamsAssignment_0");
					put(grammarAccess.getFormalParamsAccess().getParamsAssignment_1_1(), "rule__FormalParams__ParamsAssignment_1_1");
					put(grammarAccess.getParamAccess().getTypeAssignment_0(), "rule__Param__TypeAssignment_0");
					put(grammarAccess.getParamAccess().getNameAssignment_1(), "rule__Param__NameAssignment_1");
					put(grammarAccess.getBlockAccess().getStatementsAssignment_2(), "rule__Block__StatementsAssignment_2");
					put(grammarAccess.getStatementAccess().getTypesAssignment_1_0(), "rule__Statement__TypesAssignment_1_0");
					put(grammarAccess.getStatementAccess().getNameAssignment_1_1(), "rule__Statement__NameAssignment_1_1");
					put(grammarAccess.getStatementAccess().getTypesAssignment_2_0(), "rule__Statement__TypesAssignment_2_0");
					put(grammarAccess.getStatementAccess().getNameAssignment_2_1(), "rule__Statement__NameAssignment_2_1");
					put(grammarAccess.getStatementAccess().getThisoneAssignment_3_0(), "rule__Statement__ThisoneAssignment_3_0");
					put(grammarAccess.getStatementAccess().getNameAssignment_3_1(), "rule__Statement__NameAssignment_3_1");
					put(grammarAccess.getDeclarationAccess().getNameAssignment_0(), "rule__Declaration__NameAssignment_0");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.example.mydsl1.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
