group T;
program(functions) ::= <<
\documentclass{scrartcl}
\usepackage{fancyvrb}
\usepackage{color}
\begin{document}


\definecolor{const}{RGB}{255,85,255}
\definecolor{blue}{RGB}{65,85,255}
\definecolor{green}{RGB}{85,255,65}
\newcommand{\ident}[1]{#1}
\newcommand{\type}[1]{\textcolor{blue}{#1}}
\newcommand{\keyword}[1]{\emph{#1}}
\newcommand{\binop}[1]{$#1$}
\newcommand{\unop}[1]{$#1$}
\newcommand{\literal}[1]{\textcolor{const}{#1}}

\begin{Verbatim}[commandchars=\\\{\}]
<functions; separator="
">
\end{Verbatim}

\end{document}
>>

mainFunction(params, code) ::= <<
\keyword{main}(<params; separator=", ">) <code>
>>
function(name, params, code) ::= <<
<name>(<params; separator=", ">) <code>
>>

type(name) ::= "<name>"
array(base) ::= "<base>$[]$"
ident(name) ::= "<name>"

block(statements) ::= <<{
    <statements; separator="
">
}
>>

param(type, ident) ::= "<type> <ident>"
decl(type, ident) ::= "<type> <ident>,"
declInit(type, ident, rhs) ::= "<type> <ident> \binop{=} <rhs>,"
assign(lhs, rhs) ::= "<lhs> \binop{=} <rhs>,"
attributeAssign(obj, lhs, rhs) ::= "<obj>.<lhs> \binop{=} <rhs>"
return(expr) ::= "\keyword{return} <expr>,"

if(cond, then) ::= <<\keyword{if} <cond>\keyword{:}
    <then>
>>
ifElse(cond, then, else) ::= <<
\keyword{if} <cond>\keyword{:}
    <then>
\keyword{else}
    <else>
>>
for(lhs, rhs, body) ::= <<\keyword{for} <lhs> \keyword{in} <rhs>\keyword{:}
    <body>
>>
while(cond, body) ::= <<\keyword{while} <cond>\keyword{:}
    <body>
>>

breakpoint(pseudoArgument) ::= ";"

add(left, right) ::= "<left> \binop{+} <right>"
sub(left, right) ::= "<left> \binop{-} <right>"
mul(left, right) ::= "<left> \binop{*} <right>"
div(left, right) ::= "<left> \binop{/} <right>"
mod(left, right) ::= "<left> \binop{%} <right>"
and(left, right) ::= "<left> \binop{&&} <right>"
or(left, right) ::= "<left> \binop{||} <right>"
equal(left, right) ::= "<left> \binop{==} <right>"
notEqual(left, right) ::= "<left> \binop{!=} <right>"
lessThan(left, right) ::= "<left> \binop{\<} <right>"
greaterThan(left, right) ::= "<left> \binop{\>} <right>"
lessOrEqual(left, right) ::= "<left> \binop{\<=} <right>"
greaterOrEqual(left, right) ::= "<left> \binop{\>=} <right>"

not(arg) ::= "\binop{!}<arg>"
paren(arg) ::= "(<arg>)"
plus(arg) ::= "\unop{+}<arg>"
minus(arg) ::= "\unop{-}<arg>"

literal(text) ::= "\literal{<text>}"

call(function, args) ::= "<function>(<args; separator=\", \">)"

dot(left, right) ::= "<left>.<right>"

index(array, index) ::= "<array>$[$<index>$]$"

semicolon(stat) ::= "<stat>,"
breakBlock(stat) ::= "<stat>;"
