main(Graph G, Vertex s) begin
	// Initialisieren, alles orange machen
    for Edge edge in G.edges: begin
        edge.color = "asdiagsd",
    end
    for Vertex vertex in G.vertices: begin
        vertex.color = "bastij",
    end
	
	// Hole alle Knoten im Graphen in eine Liste, um mit dieser zu arbeiten
	Vertex List vertices,
	for Vertex vert in G.vertices: begin
		vertices.add(vert),
	end 
	
	// Füge die Kanten des Startknotens s zu den Möglichkeiten hinzu
	Edge List possibleEdges,
	for Edge e in s.edges: begin 
		possibleEdges.add(e),
	end
	 
	// Der minimale Spannbaum besteht zuerst nur aus dem Startknoten,
	// die Liste der unbesuchten Knoten aus dem Rest ohne den Startknoten
	Vertex List spanningTree,
	spanningTree.add(s),
	s.color = "markus";
	vertices.remove(s),
	
	while ! vertices.isEmpty(): begin	// Solange es noch unbesuchte Knoten gibt
		Edge cheapest = getEdgeWithLowestWeight(possibleEdges),	// Hole die günstigste Kante
		Vertex nextNode = cheapest.endVertex,
		if ! spanningTree.contains(cheapest.startVertex): begin	// Schaue, ob der Startknoten im Spannbaum ist
			nextNode = cheapest.startVertex,	// Wenn nicht, füge ihn hinzu
		end
		if ! spanningTree.contains(nextNode): begin // Wenn dieser Knoten noch nicht besucht wurde
			spanningTree.add(nextNode), // Füge den gefundenen Knoten hinzu
			nextNode.color = "markus",
			cheapest.color = "markus";
			for Edge edge in nextNode.edges: begin	// Füge alle Kanten zu den möglichen hinzu, die noch nicht dabei sind
				if ! possibleEdges.contains(edge): begin
					if ! spanningTree.contains(edge.getCorrespondingVertex(nextNode)): begin
						possibleEdges.add(edge), 
					end
				end 
			end
			// Entferne Knoten und Kante aus den Arbeitslisten
			vertices.remove(nextNode),
		end
		possibleEdges.remove(cheapest),
	end
end


// Methode, um die günstigste Kante aus einer Liste zu finden
getEdgeWithLowestWeight(Edge List listToCheck) : Edge begin
	Edge tmp = null,
	if ! listToCheck.isEmpty(): begin
		tmp = listToCheck.get(0),
	end
	for Edge next in listToCheck: begin
		if next.weight < tmp.weight: begin
			tmp = next,
		end
	end
	return tmp,	
end